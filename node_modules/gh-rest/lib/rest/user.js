/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.user = {};

    /**
     * Get the current user
     *
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getMe = function(callback) {
        client._request('/api/me', 'GET', null, null, callback);
    };

    /**
     * Create a new user with a local authentication strategy
     *
     * @param  {String}         displayName                     The name of the user
     * @param  {String}         email                           The email address for the user. This will be used as the username for the user
     * @param  {String}         password                        The password with which the user will authenticate
     * @param  {Object}         opts                            Optional user creation values
     * @param  {Number}         [opts.appId]                    The id of the app on which the user should be created. Only required when a global administrator is creating the user
     * @param  {String}         [opts.emailPreference]          The email preference for the user
     * @param  {Boolean}        [opts.isAdmin]                  Whether the user is an app administrator
     * @param  {String}         [opts.recaptchaChallenge]       The identifier for the recaptcha challenge. Only required when the current user is not an app administrator
     * @param  {String}         [opts.recaptchaResponse]        The recaptcha response entered for the presented challenge. Only required when the current user is not an app administrator
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.createUser = function(displayName, email, password, opts, callback) {
        opts = opts || {};
        var user = {
            'displayName': displayName,
            'email': email,
            'password': password,
            'appId': opts.appId,
            'emailPreference': opts.emailPreference,
            'isAdmin': opts.isAdmin,
            'recaptchaChallenge': opts.recaptchaChallenge,
            'recaptchaResponse': opts.recaptchaResponse
        };
        client._request('/api/users', 'POST', user, null, callback);
    };

    /**
     * Get the calendar for a user
     *
     * @param  {Number}         id                              The id of the user to get the calendar for
     * @param  {String}         start                           The timestamp (ISO 8601) from which to get the calendar for the user
     * @param  {String}         end                             The timestamp (ISO 8601) until which to get the calendar for the user
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUserCalendar = function(id, start, end, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id) + '/calendar';
        var data = {
            'start': start,
            'end': end
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the calendar for a user in iCal
     *
     * @param  {Number}         id                              The id of the user to get the calendar for
     * @param  {String}         token                           The access control token
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUserCalendarICal = function(id, token, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id);
        url += '/' + client.util.encodeURIComponent(token) + '/calendar.ical';
        var data = {
            'token': token
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the calendar for a user in RSS
     *
     * @param  {Number}         id                              The id of the user to get the calendar for
     * @param  {String}         token                           The access control token
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-user/lib/rest.js for more information
     */
    client.user.getUserCalendarRss = function(id, token, callback) {
        var url = '/api/users/' + client.util.encodeURIComponent(id);
        url += '/' + client.util.encodeURIComponent(token) + '/calendar.rss';
        var data = {
            'token': token
        };
        client._request(url, 'GET', data, null, callback);
    };
};
