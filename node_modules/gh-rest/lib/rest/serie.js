/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.serie = {};

    /**
     * Get a serie
     *
     * @param  {Number}         id                              The id of the serie to retrieve
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.getSerie = function(id, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id);
        client._request(url, 'GET', null, null, callback);
    };

    /**
     * Create a serie
     *
     * @param  {String}         displayName                     The name of the serie
     * @param  {Object}         [opts]                          A set of optional parameters
     * @param  {Number}         [opts.app]                      The id of the application to which this serie will belong
     * @param  {String}         [opts.description]              The description of the serie
     * @param  {Number}         [opts.group]                    The id of the group that can manage the serie
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.createSerie = function(displayName, opts, callback) {
        opts = opts || {};
        var data = {
            'app': opts.app,
            'description': opts.description,
            'displayName': displayName,
            'group': opts.group
        };
        client._request('/api/series', 'POST', data, null, callback);
    };

    /**
     * Update a serie
     *
     * @param  {Number}         id                              The id of the serie to update
     * @param  {Object}         update                          The updates to persist
     * @param  {String}         [update.description]            Updated event series description
     * @param  {String}         [update.displayName]            Updated event series name
     * @param  {Number}         [update.group]                  Updated id of the group that can manage the event series
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.updateSerie = function(id, update, callback) {
        update = update || {};
        var url = '/api/series/' + client.util.encodeURIComponent(id);
        client._request(url, 'POST', update, null, callback);
    };

    /**
     * Delete a serie
     *
     * @param  {Number}         id                              The id of the serie to delete
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.deleteSerie = function(id, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id);
        client._request(url, 'DELETE', null, null, callback);
    };

    /**
     * Add events to a serie
     *
     * @param  {Number}         id                      The id of the serie to add the events to
     * @param  {Number[]}       events                  The id(s) of the event(s) to add to the serie
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.addSeriesEvents = function(id, events, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/events';
        var data = {
            'events': events
        };
        client._request(url, 'POST', data, null, callback);
    };

    /**
     * Remove events from a serie
     *
     * @param  {Number}         id                      The id of the serie to remove the events from
     * @param  {Number[]}       events                  The id(s) of the event(s) to remove from the serie
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.deleteSeriesEvents = function(id, events, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/events';
        var data = {
            'events': events
        };
        client._request(url, 'DELETE', data, null, callback);
    };

    /**
     * Get the events for a serie
     *
     * @param  {Number}         id                      The id of the serie to retrieve the events for
     * @param  {Number}         [limit]                 The number of events that should be retrieved, defaults to 10
     * @param  {Number}         [offset]                The number to start paging from, defaults to 0
     * @param  {Boolean}        [includeUpcoming]       Whether to only include upcoming events
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.getSeriesEvents = function(id, limit, offset, upcoming, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/events';
        var data = {
            'limit': limit,
            'offset': offset,
            'upcoming': upcoming
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the calendar for an event series
     *
     * @param  {Number}         id                      The id of the event series to get the calendar for
     * @param  {String}         start                   The timestamp (ISO 8601) from which to get the calendar for the event series
     * @param  {String}         end                     The timestamp (ISO 8601) until which to get the calendar for the event series
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.getSeriesCalendar = function(id, start, end, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/calendar';
        var data = {
            'start': start,
            'end': end
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the RSS calendar for an event series
     *
     * @param  {Number}         id                      The id of the event series to get the calendar for
     * @param  {String}         start                   The timestamp (ISO 8601) from which to get the calendar for the event series
     * @param  {String}         end                     The timestamp (ISO 8601) until which to get the calendar for the event series
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.getSeriesCalendarRss = function(id, start, end, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/calendar.rss';
        var data = {
            'start': start,
            'end': end
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the iCal calendar for an event series
     *
     * @param  {Number}         id                      The id of the event series to get the calendar for
     * @param  {String}         start                   The timestamp (ISO 8601) from which to get the calendar for the event series
     * @param  {String}         end                     The timestamp (ISO 8601) until which to get the calendar for the event series
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.getSeriesCalendarIcal = function(id, start, end, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/calendar.ical';
        var data = {
            'start': start,
            'end': end
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Subscribe to an event series
     *
     * @param  {Number}         id                      The id of the event series to subscribe to
     * @param  {Number}         userId                  The id of the user that should be unsubscribed from the serie
     * @param  {Number}         [context]               The id of the organisational unit that the serie belonged to when the user subscribed to it
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.subscribeSeries = function(id, userId, context, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/subscribe';
        var data = {
            'userId': userId,
            'context': context
        };
        client._request(url, 'POST', data, null, callback);
    };

    /**
     * Unsubscribe from an event series
     *
     * @param  {Number}         id                      The id of the event series to unsubscribe from
     * @param  {Number}         userId                  The id of the user that should be unsubscribed from the serie
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-series/lib/rest.js for more information
     */
    client.serie.unsubscribeSeries = function(id, userId, callback) {
        var url = '/api/series/' + client.util.encodeURIComponent(id) + '/unsubscribe';
        var data = {'userId': userId};
        client._request(url, 'POST', data, null, callback);
    };
};
