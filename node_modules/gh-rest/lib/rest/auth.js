/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.auth = {};

    /**
     * Log in using local authentication
     *
     * @param  {String}         password                The password for the user
     * @param  {String}         username                The username for the user
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-auth/lib/rest.js for more information
     */
    client.auth.login = function(username, password, callback) {
        client._request('/api/auth/login', 'POST', {
            'username': username,
            'password': password
        }, null, callback);
    };

    /**
     * Log out
     *
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-auth/lib/rest.js for more information
     */
    client.auth.logout = function(callback) {
        client._request('/api/auth/logout', 'POST', null, null, callback);
    };

    /**
     * Redirect a user from an application to the SP
     *
     * @param  {String}         redirectUrl         The URL where the user should be redirect to once he succesfully authenticates
     * @param  {Function}       callback            Standard callback method
     * @param  {Object}         callback.err        An error object, if any
     * @param  {String}         callback.body       The response body
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.shibbolethApplicationRedirect = function(redirectUrl, callback) {
        client._request('/api/auth/shibboleth', 'POST', {'redirectUrl': redirectUrl}, null, callback);
    };

    /**
     * Redirect a user from the SP to the IdP
     *
     * @param  {Object}         params                  The query string parameters for this endpoint
     * @param  {String}         params.tenantAlias      The alias of the tenant on which the user wants to authenticate sign on
     * @param  {String}         params.signature        The signature for the tenant alias
     * @param  {Number}         params.expires          The time in ms since epoch when the signature expires
     * @param  {Function}       callback                Standard callback method
     * @param  {Object}         callback.err            An error object, if any
     * @param  {String}         callback.body           The response body
     * @param  {Object}         callback.response       The HTTP response object
     */
    client.auth.shibbolethSPRedirect = function(params, callback) {
        client._request('/api/auth/shibboleth/sp', 'GET', params, null, callback);
    };

    /**
     * The request Apache's mod_shib would make to our app server once a user authenticates
     *
     * @param  {Object}         attributes          The attributes that should be sent to the app server
     * @param  {Function}       callback            Standard callback method
     * @param  {Object}         callback.err        An error object, if any
     * @param  {String}         callback.body       The response body
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.shibbolethSPCallback = function(attributes, callback) {
        client._request('/api/auth/shibboleth/sp/callback', 'GET', null, attributes, callback);
    };

    /**
     * Send a request to the tenant callback endpoint for Shibboleth authentication
     *
     * @param  {Object}         params              The query string parameters for this endpoint
     * @param  {String}         params.userId       The id of the user that will be signing in
     * @param  {String}         params.signature    A signature for the user id
     * @param  {Number}         params.expires      The time in ms since epoch when the signature expires
     * @param  {Function}       callback            Standard callback method
     * @param  {Object}         callback.err        An error object, if any
     * @param  {String}         callback.body       The response body
     * @param  {Object}         callback.response   The HTTP response object
     */
    client.auth.shibbolethApplicationCallback = function(params, callback) {
        client._request('/api/auth/shibboleth/callback', 'GET', params, callback);
    };
};
