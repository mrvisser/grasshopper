/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');
var GrasshopperUtil = require('gh-core/lib/util');

var SeriesAPI = require('./api');

/**
 * @REST getSeries
 *
 * Get an event series
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /series/{id}
 * @PathParam   {number}            id                  The id of the event series to retrieve
 * @Return      {Series}                                The requested event series
 */
var getSeries = function(req, res) {
    SeriesAPI.getSerie(req.ctx, req.params.id, function(err, serie) {
        if (err) {
            return res.status(err.code).send(serie);
        }

        return res.status(200).send(serie);
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/series/:id', getSeries);
GrassHopper.appRouter.on('get', '/api/series/:id', getSeries);

/**
 * @REST getSeriesEvents
 *
 * Get the events in an event series
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /series/{id}/events
 * @PathParam   {number}            id                  The id of the event series to retrieve the events for
 * @QueryParam  {number}            [limit]             The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]            The paging number of the results to retrieve
 * @QueryParam  {boolean}           [upcoming]          Whether to only include upcoming events. Defaults to `true`
 * @Return      {EventList}                             The events in the event series
 */
var getSeriesEvents = function(req, res) {
    SeriesAPI.getSeriesEvents(req.ctx, req.params.id, req.query.limit, req.query.offset, req.query.upcoming, function(err, serie, events) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send({'results': events});
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/series/:id/events', getSeriesEvents);
GrassHopper.appRouter.on('get', '/api/series/:id/events', getSeriesEvents);

/**
 * @REST getSeriesCalendar
 *
 * Get the calendar for an event series
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /series/{id}/calendar
 * @PathParam   {number}            id                  The id of the event series to get the calendar for
 * @QueryParam  {string}            start               The timestamp (ISO 8601) from which to get the calendar for the event series
 * @QueryParam  {string}            end                 The timestamp (ISO 8601) until which to get the calendar for the event series
 * @Return      {Event[]}                               The requested event series calendar
 */
var getSeriesCalendar = function(req, res) {
    SeriesAPI.getSeriesCalendar(req.ctx, req.params.id, req.query.start, req.query.end, function(err, serie, events) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send({'results': events});
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/series/:id/calendar', getSeriesCalendar);
GrassHopper.appRouter.on('get', '/api/series/:id/calendar', getSeriesCalendar);

/**
 * @REST getSeriesCalendarIcal
 *
 * Get the calendar for an event series in iCal
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /series/{id}/calendar.ical
 * @PathParam   {number}            id                  The id of the event series to get the calendar for in iCal format
 * @QueryParam  {string}            [start]             The timestamp (ISO 8601) from which to get the calendar for the event series
 * @QueryParam  {string}            [end]               The timestamp (ISO 8601) until which to get the calendar for the event series
 * @Return      {ical}                                  The requested event series calendar in iCal format
 */
var getSeriesCalendarIcal = function(req, res) {
    SeriesAPI.getSeriesCalendarAsICal(req.ctx, req.params.id, req.query.start, req.query.end, function(err, calendar) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.set('Content-Type', 'text/calendar');
        return res.status(200).send(calendar);
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/series/:id/calendar.ical', getSeriesCalendarIcal);
GrassHopper.appRouter.on('get', '/api/series/:id/calendar.ical', getSeriesCalendarIcal);

/**
 * @REST getSeriesCalendarRss
 *
 * Get the calendar for an event series in RSS
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /series/{id}/calendar.rss
 * @PathParam   {number}            id                  The id of the event series to get the calendar for in RSS format
 * @QueryParam  {string}            [start]             The timestamp (ISO 8601) from which to get the calendar for the event series
 * @QueryParam  {string}            [end]               The timestamp (ISO 8601) until which to get the calendar for the event series
 * @Return      {rss}                                   The requested event series calendar in RSS format
 */
var getSeriesCalendarRss = function(req, res) {
    SeriesAPI.getSeriesCalendarAsRSS(req.ctx, req.params.id, req.query.start, req.query.end, function(err, calendar) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.set('Content-Type', 'application/rss+xml');
        return res.status(200).send(calendar);
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/series/:id/calendar.rss', getSeriesCalendarRss);
GrassHopper.appRouter.on('get', '/api/series/:id/calendar.rss', getSeriesCalendarRss);

/**
 * @REST getSeriesUpcoming
 *
 * Get the upcoming events in an event series
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /series/{id}/upcoming
 * @PathParam   {number}            id                  The id of the event series to get the upcoming events for
 * @QueryParam  {number}            [limit]             The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]            The paging number of the results to retrieve
 * @Return      {EventList}                             The upcoming events in the event series
 */
var getSeriesUpcoming = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('get', '/api/series/:id/upcoming', getSeriesUpcoming);
GrassHopper.appRouter.on('get', '/api/series/:id/upcoming', getSeriesUpcoming);

/**
 * @REST createSeries
 *
 * Create a new event series in the current app
 *
 * @Server      app
 * @Method      POST
 * @Path        /series
 * @FormParam   {string}            displayName         The name of the event series
 * @FormParam   {string}            [description]       The description of the event series
 * @FormParam   {number}            [group]             The id of the group that can manage the event series. Defaults to creating a new group with the current user as a member
 * @Return      {Series}                                The created event series
 */

/**
 * @REST createSeriesByApp
 *
 * Create a new event series in an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /series
 * @FormParam   {number}            app                 The id of the app to create the event series for
 * @FormParam   {string}            displayName         The name of the event series
 * @FormParam   {string}            [description]       The description of the event series
 * @FormParam   {number}            [group]             The id of the group that can manage the event series. Defaults to creating a new group with the current user as a member
 * @Return      {Series}                                The created event series
 */
var createSeries = function(req, res) {
    var appId = req.body.app || req.ctx.app.id;
    SeriesAPI.createSerie(req.ctx, appId, req.body.displayName, req.body.description, req.body.group, function(err, series) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(201).send(series);
    });
};

GrassHopper.appRouter.on('post', '/api/series', createSeries);
GrassHopper.globalAdminRouter.on('post', '/api/series', createSeries);

/**
 * @REST updateSeries
 *
 * Update an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}
 * @PathParam   {number}            id                  The id of the event series to update
 * @FormParam   {string}            [description]       Updated event series description
 * @FormParam   {string}            [displayName]       Updated event series name
 * @FormParam   {group}             [group]             Updated id of the group that can manage the event series
 * @Return      {Series}                                The updated event series
 */
var updateSeries = function(req, res) {
    SeriesAPI.updateSerie(req.ctx, req.params.id, req.body, function(err, series) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(200).send(series);
    });
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id', updateSeries);
GrassHopper.appRouter.on('post', '/api/series/:id', updateSeries);

/**
 * @REST setSeriesPicture
 *
 * Store a picture for an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/picture
 * @PathParam   {number}        id                      The id of the event series to store the picture for
 * @FormParam   {File}          file                    Image that should be stored as the event series picture
 * @Return      {Series}                                The updated event series
 */
var setSeriesPicture = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id/picture', setSeriesPicture);
GrassHopper.appRouter.on('post', '/api/series/:id/picture', setSeriesPicture);

/**
 * @REST cropSeriesPicture
 *
 * Crop the picture for an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/picture/crop
 * @FormParam   {number}        id                      The id of the event series to crop the picture for
 * @FormParam   {number}        width                   The width of the square that needs to be cropped out
 * @FormParam   {number}        x                       The x coordinate of the top left corner to start cropping at
 * @FormParam   {number}        y                       The y coordinate of the top left corner to start cropping at
 * @Return      {Series}                                The updated event series
 */
var cropSeriesPicture = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id/picture/crop', cropSeriesPicture);
GrassHopper.appRouter.on('post', '/api/series/:id/picture/crop', cropSeriesPicture);

/**
 * @REST addSeriesEvents
 *
 * Add an event to an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/events
 * @PathParam   {number}            id                  The id of the event series to add an event to
 * @FormParam   {number[]}          events              The id of the event(s) to add to the event series
 * @Return      {void}
 */
var addSeriesEvents = function(req, res) {
    var events = GrasshopperUtil.toArray(req.body.events);
    SeriesAPI.addSeriesEvents(req.ctx, req.params.id, events, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send();
    });
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id/events', addSeriesEvents);
GrassHopper.appRouter.on('post', '/api/series/:id/events', addSeriesEvents);

/**
 * @REST deleteSeriesEvents
 *
 * Remove an event from an event series
 *
 * @Server      admin,app
 * @Method      DELETE
 * @Path        /series/{id}/events
 * @PathParam   {number}            id                  The id of the event series to remove an event from
 * @FormParam   {number[]}          events              The id of the event(s) to remove from the event series
 * @Return      {void}
 */
var deleteSeriesEvents = function(req, res) {
    var events = GrasshopperUtil.toArray(req.body.events);
    SeriesAPI.deleteSeriesEvents(req.ctx, req.params.id, events, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send();
    });
};

GrassHopper.globalAdminRouter.on('delete', '/api/series/:id/events', deleteSeriesEvents);
GrassHopper.appRouter.on('delete', '/api/series/:id/events', deleteSeriesEvents);

/**
 * @REST deleteSeries
 *
 * Delete an event series
 *
 * @Server      admin,app
 * @Method      DELETE
 * @Path        /series/{id}
 * @PathParam   {number}            id                  The id of the event series to delete
 * @Return      {void}
 */
var deleteSeries = function(req, res) {
    SeriesAPI.deleteSerie(req.ctx, req.params.id, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send();
    });
};

GrassHopper.globalAdminRouter.on('delete', '/api/series/:id', deleteSeries);
GrassHopper.appRouter.on('delete', '/api/series/:id', deleteSeries);

/**
 * @REST getSeriesSubscribers
 *
 * Get the users that have subscribed to an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/subscribers
 * @PathParam   {number}            id                  The id of the event series to get the subscribers for
 * @QueryParam  {number}            [limit]             The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]            The paging number of the results to retrieve
 * @Return      {UserList}                              The users that have subscribed to the event series
 */
var getSeriesSubscribers = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id/subscribers', getSeriesSubscribers);
GrassHopper.appRouter.on('post', '/api/series/:id/subscribers', getSeriesSubscribers);

/**
 * @REST subscribeSeries
 *
 * Subscribe a user to an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/subscribe
 * @PathParam   {number}            id                  The id of the event series to subscribe to
 * @FormParam   {number}            [userId]            The id of the user that should be subscribed. Defaults to the current user
 * @FormParam   {number}            [context]           The id of the organisational unit to which the serie belongs
 * @Return      {void}
 */
var subscribeSeries = function(req, res) {
    SeriesAPI.subscribeSeries(req.ctx, req.params.id, req.body.userId, req.body.context, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.sendStatus(200);
    });
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id/subscribe', subscribeSeries);
GrassHopper.appRouter.on('post', '/api/series/:id/subscribe', subscribeSeries);

/**
 * @REST unsubscribeSeries
 *
 * Unsubscribe a user from an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/unsubscribe
 * @PathParam   {number}            id                  The id of the event series to unsubscribe from
 * @FormParam   {number}            [userId]            The id of the user that should be unsubscribed. Defaults to the current user
 * @Return      {void}
 */
var unsubscribeSeries = function(req, res) {
    SeriesAPI.unsubscribeSeries(req.ctx, req.params.id, req.body.userId, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.sendStatus(200);
    });
};

GrassHopper.globalAdminRouter.on('post', '/api/series/:id/unsubscribe', unsubscribeSeries);
GrassHopper.appRouter.on('post', '/api/series/:id/unsubscribe', unsubscribeSeries);
