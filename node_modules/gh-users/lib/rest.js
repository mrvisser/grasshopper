/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

var UsersAPI = require('gh-users');

/**
 * @REST getUsers
 *
 * Get all users for an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users
 * @QueryParam  {number}            [appId]                 The id of the app to retrieve the users for
 * @QueryParam  {number}            [limit]                 The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]                The paging number of the results to retrieve
 * @Return      {UserList}                                  The users for the requested tenant or app
 */
GrassHopper.globalAdminRouter.on('get', '/api/users', function(req, res) {
    res.sendStatus(501);
});

/**
 * @REST getUsers
 *
 * Get the users in the current app
 *
 * @Server      app
 * @Method      GET
 * @Path        /users
 * @QueryParam  {number}            [limit]                 The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]                The paging number of the results to retrieve
 * @Return      {UserList}                                  The users for the current app
 */
GrassHopper.appRouter.on('get', '/api/users', function(req, res) {
    res.sendStatus(501);
});

/**
 * @REST getUser
 *
 * Get a user
 *
 * @Server      admin
 * @Method      GET
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to retrieve
 * @Return      {User}                                      The requested user
 */
var getUser = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('get', '/api/users/:id', getUser);
GrassHopper.appRouter.on('get', '/api/users/:id', getUser);

/**
 * @REST getMe
 *
 * Get the current user
 *
 * @Server      app
 * @Method      GET
 * @Path        /me
 * @Return      {Me}                                        The current user
 */
GrassHopper.appRouter.on('get', '/api/me', function(req, res) {
    res.status(200).send(req.ctx.user);
});

/**
 * @REST getUserCalendar
 *
 * Get the calendar for a user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /users/{id}/calendar
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @QueryParam  {string}            start                   The timestamp (ISO 8601) from which to get the calendar for the user
 * @QueryParam  {string}            end                     The timestamp (ISO 8601) until which to get the calendar for the user
 * @Return      {Event[]}                                   The requested user calendar
 */
var getUserCalendar = function(req, res) {
    UsersAPI.getUserCalendar(req.ctx, req.params.id, req.query.start, req.query.end, function(err, calendar) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send({'results': calendar});
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/users/:id/calendar', getUserCalendar);
GrassHopper.appRouter.on('get', '/api/users/:id/calendar', getUserCalendar);

/**
 * @REST getUserCalendarIcal
 *
 * Get the calendar for a user in iCal
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /users/{id}/{token}/calendar.ical
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @PathParam   {string}            token                   The access control token
 * @Return      {ical}                                      The requested user calendar in iCal format
 */
var getUserCalendarIcal = function(req, res) {
    UsersAPI.getUserCalendarIcal(req.ctx, req.params.id, req.params.token, function(err, calendar) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.set('Content-Type', 'text/calendar');
        return res.status(200).send(calendar);
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/users/:id/:token/calendar.ical', getUserCalendarIcal);
GrassHopper.appRouter.on('get', '/api/users/:id/:token/calendar.ical', getUserCalendarIcal);

/**
 * @REST getUserCalendarRss
 *
 * Get the calendar for a user in RSS
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /users/{id}/{token}/calendar.rss
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @PathParam   {string}            token                   The access control token
 * @Return      {rss}                                       The requested event series calendar in RSS format
 */
var getUserCalendarRss = function(req, res) {
    UsersAPI.getUserCalendarRSS(req.ctx, req.params.id, req.params.token, function(err, calendar) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.set('Content-Type', 'application/rss+xml');
        return res.status(200).send(calendar);
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/users/:id/:token/calendar.rss', getUserCalendarRss);
GrassHopper.appRouter.on('get', '/api/users/:id/:token/calendar.rss', getUserCalendarRss);

/**
 * @REST updateUserCalendarToken
 *
 * Update the user calendar token
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/updateToken
 * @PathParam   {number}            id                      The id of the user to get the calendar for
 * @Return      {User}                                      The updated user
 */
var updateUserCalendarToken = function(req, res) {
    UsersAPI.updateUserCalendarToken(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send(user);
    });
};
GrassHopper.globalAdminRouter.on('post', '/api/users/:id/updateToken', updateUserCalendarToken);
GrassHopper.appRouter.on('post', '/api/users/:id/updateToken', updateUserCalendarToken);

/**
 * @REST getUserUpcoming
 *
 * Get the upcoming events for a user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /users/{id}/upcoming
 * @PathParam   {number}            id                      The id of the user to get the upcoming events for
 * @QueryParam  {number}            [limit]                 The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]                The paging number of the results to retrieve
 * @Return      {EventList}                                 The upcoming events for the user
 */
var getUserUpcoming = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('get', '/api/users/:id/upcoming', getUserUpcoming);
GrassHopper.appRouter.on('get', '/api/users/:id/upcoming', getUserUpcoming);

/**
 * @REST getTermsAndConditions
 *
 * Get the Terms and Conditions
 *
 * @Server      app
 * @Method      GET
 * @Path        /users/termsAndConditions
 * @Return      {TermsAndConditions}                        The Terms and Conditions for the current app
 */
GrassHopper.appRouter.on('get', '/api/users/termsAndConditions', function(req, res) {
    res.sendStatus(501);
});

/**
 * @REST acceptTermsAndConditions
 *
 * Accept the Terms and Conditions
 *
 * @Server      app
 * @Method      POST
 * @Path        /users/{id}/termsAndConditions
 * @PathParam   {string}            id                      The id of the user for which to accept the Terms and Conditions on the current app
 * @Return      {TermsAndConditionsStatus}                  The updated status of the Terms and Conditions for the user on the current app
 */
GrassHopper.appRouter.on('post', '/api/users/:id/termsAndConditions', function(req, res) {
    res.sendStatus(501);
});

/**
 * Create a new user with a local authentication strategy
 *
 * @param  {Object}                 req                     Express request object
 * @param  {Object}                 res                     Express response object
 * @param  {Number}                 appId                   The id of the app on which the user should be created
 * @api private
 */
var createUser = function(req, res, appId) {
    // Extract the user profile properties
    var userProfile = {
        'displayName': req.body.displayName,
        'email': req.body.email,
        'emailPreference': req.body.emailPreference,
        'isAdmin': req.body.isAdmin
    };
    // Extract the authentication credentials. The email address
    // will be used as the username
    var credentials = {
        'strategy': 'local',
        'password': req.body.password
    };

    UsersAPI.createUser(req.ctx, appId, userProfile, credentials, function(err, user) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        res.status(201).send(user);
    });
};

/**
 * @REST createUser
 *
 * Create a new user with a local authentication strategy
 *
 * @Server      admin
 * @Method      POST
 * @Path        /users
 * @FormParam   {number}            appId                   The id of the app on which the user should be created
 * @FormParam   {string}            displayName             The name of the user
 * @FormParam   {string}            email                   The email address for the user. This will be used as the username for the user
 * @FormParam   {string}            password                The password with which the user will authenticate
 * @FormParam   {string}            [emailPreference]       The email preference for the user       [immediate,no]
 * @FormParam   {boolean}           [isAdmin]               Whether the user is an app administrator
 * @Return      {User}                                      The created user
 */
GrassHopper.globalAdminRouter.on('post', '/api/users', function(req, res) {
    return createUser(req, res, req.body.appId);
});

/**
 * @REST createUser
 *
 * Create a new user with a local authentication strategy
 *
 * @Server      app
 * @Method      POST
 * @Path        /users
 * @FormParam   {string}            displayName             The name of the user
 * @FormParam   {string}            email                   The email address for the user. This will be used as the username for the user
 * @FormParam   {string}            password                The password with which the user will authenticate
 * @FormParam   {string}            [emailPreference]       The email preference for the user    [immediate,no]
 * @FormParam   {boolean}           [isAdmin]               Whether the user is an app administrator
 * @FormParam   {string}            [recaptchaChallenge]    The identifier for the recaptcha challenge. Only required when the current user is not an app administrator
 * @FormParam   {string}            [recaptchaResponse]     The recaptcha response entered for the presented challenge. Only required when the current user is not an app administrator
 * @Return      {User}                                      The created user
 */
GrassHopper.appRouter.on('post', '/api/users', function(req, res) {
    // TODO: Recaptcha validation

    return createUser(req, res, req.ghApp.id);
});

/**
 * @REST importUsers
 *
 * Import users using a CSV file
 *
 * @Server      admin
 * @Method      POST
 * @Path        /users/import
 * @FormParam   {string}            authenticationStrategy  The authentication strategy for the user    [local,shibboleth]
 * @FormParam   {File}              file                    The CSV file to import
 * @FormParam   {number}            tenant                  The id of the tenant to which the users should be imported
 * @FormParam   {number[]}          [app]                   The id(s) of the app(s) to which the users should be associated
 * @FormParam   {boolean}           [forceProfileUpdate]    Whether the user information should be updated, even when other user information is already present. Defaults to `false`
 * @Return      {void}
 */
GrassHopper.globalAdminRouter.on('post', '/api/users/import', function(req, res) {
    res.sendStatus(501);
});

/**
 * @REST updateUser
 *
 * Update a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}
 * @PathParam   {number}            id                      The id of the user to update
 * @FormParam   {string}            [appId]                 The id of the app for which to update the app-specific user values
 * @FormParam   {string}            [displayName]           Updated user name
 * @FormParam   {string}            [email]                 Updated user email address
 * @FormParam   {string}            [emailPreference]       Updated user email preference on the current app    [immediate,no]
 * @Return      {User}                                      The updated user
 */
var updateUser = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/users/:id', updateUser);
GrassHopper.appRouter.on('post', '/api/users/:id', updateUser);

/**
 * @REST updateAdminStatus
 *
 * Update the app administrator status for a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/admin
 * @PathParam   {number}            id                      The id of the user to update the app administrator status for
 * @FormParam   {boolean}           admin                   Whether the user should be an app administrator
 * @Return      {User}                                      The updated user
 */
var updateAdminStatus = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/users/:id/admin', updateAdminStatus);
GrassHopper.appRouter.on('post', '/api/users/:id/admin', updateAdminStatus);

/**
 * @REST setUserPicture
 *
 * Store a profile picture for a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/picture
 * @PathParam   {number}            id                      The id of the user to store the profile picture for
 * @FormParam   {File}              file                    Image that should be stored as the user profile picture
 * @Return      {User}                                      The updated user
 */
var setUserPicture = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/users/:id/picture', setUserPicture);
GrassHopper.appRouter.on('post', '/api/users/:id/picture', setUserPicture);

/**
 * @REST cropUserPicture
 *
 * Crop the profile picture for a user
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/picture/crop
 * @FormParam   {number}            id                      The id of the user to crop the profile picture for
 * @FormParam   {number}            width                   The width of the square that needs to be cropped out
 * @FormParam   {number}            x                       The x coordinate of the top left corner to start cropping at
 * @FormParam   {number}            y                       The y coordinate of the top left corner to start cropping at
 * @Return      {User}                                      The updated user
 */
var cropUserPicture = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/users/:id/picture/crop', cropUserPicture);
GrassHopper.appRouter.on('post', '/api/users/:id/picture/crop', cropUserPicture);
