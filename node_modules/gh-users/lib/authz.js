/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Determine whether or not the user in context can update a user
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {User}       user                        The user to update
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canUpdate          `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canUpdateUser = module.exports.canUpdateUser = function(ctx, user, callback) {
    // Anonymous users cannot update a user
    if (!ctx.user) {
        return callback(null, false);

    // Application and global admins can updaet a user
    } else if (ctx.user.canAdmin(user.AppId)) {
        return callback(null, true);

    // A user can update his own account
    } else if (ctx.user.id === user.id) {
        return callback(null, true);
    }

    // Everyone else cannot update user
    return callback(null, false);
};

/**
 * Determine whether or not the user in context can update a user's calendar token
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {User}       user                        The user to update the calendar token for
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canUpdateToken     `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canUpdateUserToken = module.exports.canUpdateUserToken = function(ctx, user, callback) {
    // Updating a user's calendar token requires the same permissions as updating the user
    return canUpdateUser(ctx, user, callback);
};

/**
 * Determine whether or not the user in context can get a user's calendar
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {User}       user                        The user to get the calendar for
 * @param  {String}     [token]                     An optional access control token
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canGetCalendar     `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canGetUserCalendar = module.exports.canGetUserCalendar = function(ctx, user, token, callback) {
    // If a token was provided and matches the one that
    // is stored for the user, the calendar can be retrieved
    if (token && user.calendarToken === token) {
        return callback(null, true);

    // Anonymous users cannot retrieve a calendar
    } else if (!ctx.user) {
        return callback(null, false);

    // Application and global admins can retrieve a user's calendar
    } else if (ctx.user.canAdmin(user.AppId)) {
        return callback(null, true);

    // A user can retrieve their own calendar
    } else if (ctx.user.id === user.id) {
        return callback(null, true);
    }

    // Everyone else cannot retrieve the calendar
    return callback(null, false);
};
