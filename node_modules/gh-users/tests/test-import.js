/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var fs = require('fs');

var AuthTestsUtil = require('gh-auth/tests/util');
var ConfigTestsUtil = require('gh-config/tests/util');
var RestAPI = require('gh-rest');
var TestsUtil = require('gh-tests/lib/util');

var UsersTestsUtil = require('./util');

describe('Users', function() {

    describe('Import', function() {

        /**
         * Test that verifies that users can be imported
         */
        it('verify users can be imported', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Import some local users
                    var stream = fs.createReadStream(__dirname + '/data/users.csv');
                    UsersTestsUtil.assertImportUsers(globalAdminClient, stream, app.id, 'local', false, function() {

                        // Import some shibboleth users
                        stream = fs.createReadStream(__dirname + '/data/users-shib.csv');
                        UsersTestsUtil.assertImportUsers(globalAdminClient, stream, app.id, 'shibboleth', false, function() {

                            // Assert the users were imported
                            UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, 'Christina McChristina', null, null, function(users) {
                                var user = _.find(users.results, {'displayName': 'Christina McChristina'});
                                assert.ok(user);
                                assert.strictEqual(user.displayName, 'Christina McChristina');
                                assert.strictEqual(user.email, 'christina@example.com');
                                UsersTestsUtil.assertUser(user, {'canViewAllFields': true});
                                UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, 'Rosalia Newland', null, null, function(users) {
                                    user = _.find(users.results, {'displayName': 'Rosalia Newland'});
                                    assert.ok(user);
                                    assert.strictEqual(user.displayName, 'Rosalia Newland');
                                    assert.strictEqual(user.email, 'Newland@example.com');
                                    assert.strictEqual(user.shibbolethId, 'shibNewland');
                                    UsersTestsUtil.assertUser(user, {'canViewAllFields': true});
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when importing users
         */
        it('verify validation when importing users', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Missing file
                    UsersTestsUtil.assertImportUsersFails(globalAdminClient, null, app.id, 'local', false, 400, function() {

                        // Missing application id
                        var stream = fs.createReadStream(__dirname + '/data/users.csv');
                        UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, null, 'local', false, 400, function() {

                            // Invalid application id
                            stream = fs.createReadStream(__dirname + '/data/users.csv');
                            UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, 'not an id', 'local', false, 400, function() {

                                // Unknown application id
                                stream = fs.createReadStream(__dirname + '/data/users.csv');
                                UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, -1, 'local', false, 404, function() {
                                    stream = fs.createReadStream(__dirname + '/data/users.csv');
                                    UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, 213123123, 'local', false, 404, function() {

                                        // Invalid authentication strategy
                                        stream = fs.createReadStream(__dirname + '/data/users.csv');
                                        UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'lolzers', false, 400, function() {

                                            // Invalid overwrite flag
                                            stream = fs.createReadStream(__dirname + '/data/users.csv');
                                            UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'local', 'not a boolean', 400, function() {

                                                // Missing displayName
                                                stream = fs.createReadStream(__dirname + '/data/users-local-missing-name.csv');
                                                UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'local', false, 400, function() {

                                                    // Missing email
                                                    stream = fs.createReadStream(__dirname + '/data/users-local-missing-email.csv');
                                                    UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'local', false, 400, function() {

                                                        // Missing password
                                                        stream = fs.createReadStream(__dirname + '/data/users-local-missing-password.csv');
                                                        UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'local', false, 400, function() {

                                                            // Invalid email
                                                            stream = fs.createReadStream(__dirname + '/data/users-local-invalid-email.csv');
                                                            UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'local', false, 400, function() {

                                                                // Invalid password
                                                                stream = fs.createReadStream(__dirname + '/data/users-local-invalid-password.csv');
                                                                UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'local', false, 400, function() {

                                                                    // Missing displayName when importing Shibboleth users
                                                                    stream = fs.createReadStream(__dirname + '/data/users-shib-missing-name.csv');
                                                                    UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'shibboleth', false, 400, function() {

                                                                        // Missing shibboleth id when importing Shibboleth users
                                                                        stream = fs.createReadStream(__dirname + '/data/users-shib-missing-id.csv');
                                                                        UsersTestsUtil.assertImportUsersFails(globalAdminClient, stream, app.id, 'shibboleth', false, 400, function() {

                                                                            // Sanity-check no users were imported
                                                                            UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, null, null, null, function(users) {
                                                                                assert.strictEqual(users.results.length, 0);
                                                                                return callback();
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when importing users
         */
        it('verify authorization when importing users', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Anonymous users cannot import anything
                    TestsUtil.getAnonymousAppUserClient(app, function(anonymousAppClient) {
                        var stream = fs.createReadStream(__dirname + '/data/users.csv');
                        UsersTestsUtil.assertImportUsersFails(anonymousAppClient, stream, app.id, 'local', false, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                stream = fs.createReadStream(__dirname + '/data/users.csv');
                                UsersTestsUtil.assertImportUsersFails(anonymousGlobalClient, stream, app.id, 'local', false, 401, function() {

                                    // Note that we can't test regular users or application admins as
                                    // the endpoint is not exposed on the application server

                                    // Sanity-check no users were imported
                                    UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, null, null, null, function(users) {
                                        assert.strictEqual(users.results.length, 0);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that user information can be overwritten
         */
        it('verify user information can be overwritten', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Do an initial import
                    var stream = fs.createReadStream(__dirname + '/data/users.csv');
                    UsersTestsUtil.assertImportUsers(globalAdminClient, stream, app.id, 'local', false, function() {

                        // Assert the users were imported
                        UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, 'Christina McChristina', null, null, function(users) {
                            var user = _.find(users.results, {'displayName': 'Christina McChristina'});
                            assert.ok(user);

                            // Update the user's name
                            UsersTestsUtil.assertUpdateUser(globalAdminClient, user.id, {'displayName': 'fool'}, function() {

                                // Re-import the users and overwrite a user's information
                                stream = fs.createReadStream(__dirname + '/data/users.csv');
                                UsersTestsUtil.assertImportUsers(globalAdminClient, stream, app.id, 'local', true, function() {

                                    // Assert the name has been updated
                                    UsersTestsUtil.assertGetUser(globalAdminClient, user.id, function(user) {
                                        assert.notStrictEqual(user.displayName, 'fool');
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users imported with the shibboleth strategy are able to authenticate into those accounts
         */
        it('verify users imported with the shibboleth strategy are able to authenticate into those accounts', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Import some shibboleth users
                    var stream = fs.createReadStream(__dirname + '/data/users-shib.csv');
                    UsersTestsUtil.assertImportUsers(globalAdminClient, stream, app.id, 'shibboleth', false, function() {

                        // Ensure the user was imported
                        UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, 'Rosalia Newland', null, null, function(users) {
                            var user = _.find(users.results, {'displayName': 'Rosalia Newland'});
                            assert.ok(user);

                            // Enable shibboleth
                            var defaultConfiguration = {
                                'enableShibbolethAuth': true,
                                'shibIdpEntityId': 'https://idp.olympia.edu/shibboleth',
                                'shibExternalIdAttributes': 'eppn persistent-id targeted-id',
                                'shibMapDisplayname': 'displayname cn',
                                'shibMapEmail': 'mail email eppn'
                            };
                            ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, defaultConfiguration, function() {

                                var attributes = {
                                    'email': TestsUtil.generateTestEmailAddress(),
                                    'displayname': 'A different value from the CSV'
                                };
                                AuthTestsUtil.assertShibbolethLogin(app, 'shibNewland', attributes, null, function(restClient) {

                                    // Verify we're authenticated
                                    UsersTestsUtil.assertGetMe(restClient, function(me) {
                                        assert.strictEqual(me.id, user.id);
                                        assert.strictEqual(me.displayName, user.displayName);
                                        assert.strictEqual(me.email, user.email);
                                        assert.strictEqual(me.shibbolethId, user.shibbolethId);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that users tripping up the unique requirements do not block further import
         */
        it('verify users tripping up the unique requirements do not block further import', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    // Import a CSV file that contains a few users that would trip up the unique
                    // constraints put on the email and shibbolethId fields
                    var stream = fs.createReadStream(__dirname + '/data/users-duplicate.csv');
                    UsersTestsUtil.assertImportUsers(globalAdminClient, stream, app.id, 'shibboleth', false, function() {

                        // Get the users. The users get created starting at the back. This means that by the
                        // time `User 4` gets created, `User 6` already exists and is using the shibboleth id.
                        // Similarly, the email address for `User 3` is already being used by `User 5`
                        UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, null, null, null, function(users) {
                            // User 3 and 4 shouldn't get created, which leaves just 6 users
                            assert.strictEqual(users.results.length, 6);

                            // Ensure the correct users were created
                            var acceptedDisplayNames = ['User 1', 'User 2', 'User 5', 'User 6', 'User 7', 'User 8'];
                            var acceptedEmails = ['user1@example.com', 'user2@example.com', 'user5@example.com', 'user6@example.com', 'user7@example.com', 'user8@example.com'];
                            var acceptedShibbolethIds = ['user1', 'user2', 'user5', 'user6', 'user7', 'user8'];
                            _.each(users.results, function(user) {
                                assert.ok(_.contains(acceptedDisplayNames, user.displayName));
                                assert.ok(_.contains(acceptedEmails, user.email));
                                assert.ok(_.contains(acceptedShibbolethIds, user.shibbolethId));
                            });
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
