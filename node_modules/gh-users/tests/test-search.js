/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var OrgUnitTestUtil = require('gh-orgunit/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var UsersTestsUtil = require('./util');

describe('Users - Search', function() {

    /**
     * Create a couple of users with distinct names and email address
     *
     * @param  {App}            app                 The app in which the users should be created
     * @param  {Function}       callback            Standard callback function
     * @param  {Object}         callback.jack       User object as generated by `TestsUtil.generateTestUsers`
     * @param  {Object}         callback.william    User object as generated by `TestsUtil.generateTestUsers`
     * @param  {Object}         callback.shirley    User object as generated by `TestsUtil.generateTestUsers`
     */
    var _setup = function(app, callback) {
        TestsUtil.generateTestUsers(app, 3, false, function(jack, william, shirley) {

            // Update the display names and email addresses
            UsersTestsUtil.assertUpdateUser(jack.client, jack.profile.id, {'displayName': 'Jack Daniels', 'email': 'jd123_' + _.random(100000) + '@example.com'}, function() {
                UsersTestsUtil.assertUpdateUser(william.client, william.profile.id, {'displayName': 'William Lawson', 'email': 'wl4567_' + _.random(100000) + '@example.com'}, function() {
                    UsersTestsUtil.assertUpdateUser(shirley.client, shirley.profile.id, {'displayName': 'Shirley Temple', 'email': 'st789_' + _.random(100000) + '@example.com'}, function() {
                        return callback(jack, william, shirley);
                    });
                });
            });
        });
    };

    /**
     * Test that verifies that users can be queried on their display name
     */
    it('verify users can be queried on their display name', function(callback) {
        _setup(global.tests.apps.cam2013, function(jack, william, shirley) {

            // Search for 'jac'
            UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, null, 'jac', 50, null, function(users) {
                assert.ok(users.results.length > 0);

                // Get the index of our three users in the results
                var jackIndex = _.findIndex(users.results, {'id': jack.profile.id});
                var williamIndex = _.findIndex(users.results, {'id': william.profile.id});
                var shirleyIndex = _.findIndex(users.results, {'id': shirley.profile.id});

                // Because the endpoint only returns x number of users, The "William Lawson" and "Shirley Temple"
                // user might not get returned. Default the index value to a really high number, so we can more easily
                // reason about them
                jackIndex = (jackIndex === -1) ? Number.MAX_VALUE : jackIndex;
                williamIndex = (williamIndex === -1) ? Number.MAX_VALUE : williamIndex;
                shirleyIndex = (shirleyIndex === -1) ? Number.MAX_VALUE : shirleyIndex;

                // Verify the "Jack Daniels" user is returned
                assert.ok(jackIndex > -1);
                assert.ok(jackIndex < Number.MAX_VALUE);

                // Verify he is returned before the other two users
                assert.ok(jackIndex < williamIndex);
                assert.ok(jackIndex < shirleyIndex);
                return callback();
            });
        });
    });

    /**
     * Test that verifies that users can be queried on their email address
     */
    it('verify users can be queried on their email address', function(callback) {
        _setup(global.tests.apps.cam2013, function(jack, william, shirley) {

            // Search for 'jd123' which is the start of Jack's email address
            UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, null, 'jd', 50, null, function(users) {
                assert.ok(users.results.length > 0);

                // Get the index of our three users in the results
                var jackIndex = _.findIndex(users.results, {'id': jack.profile.id});
                var williamIndex = _.findIndex(users.results, {'id': william.profile.id});
                var shirleyIndex = _.findIndex(users.results, {'id': shirley.profile.id});

                // Because the endpoint only returns x number of users, The "William Lawson" and "Shirley Temple"
                // user might not get returned. Default the index value to a really high number, so we can more easily
                // reason about them
                jackIndex = (jackIndex === -1) ? Number.MAX_VALUE : jackIndex;
                williamIndex = (williamIndex === -1) ? Number.MAX_VALUE : williamIndex;
                shirleyIndex = (shirleyIndex === -1) ? Number.MAX_VALUE : shirleyIndex;

                // Verify the "Jack Daniels" user is returned
                assert.ok(jackIndex > -1);
                assert.ok(jackIndex < Number.MAX_VALUE);

                // Verify he is returned before the other two users
                assert.ok(jackIndex < williamIndex);
                assert.ok(jackIndex < shirleyIndex);
                return callback();
            });
        });
    });

    /**
     * Test that verifies that users can be queried on their Shibboleth id
     */
    it('verify users can be queried on their Shibboleth id', function(callback) {
        // TODO
        return callback();
    });

    /**
     * Test that verifies that search results can be paged
     */
    it('verify search results can be paged', function(callback) {
        // Setup a new app with 3 users in it, so we can verify that results are scoped to the provided application
        TestsUtil.generateTestTenant(1, function(tenant, app) {
            _setup(app, function(jack, william, shirley) {

                // Get the first 2 users
                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                    UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, 'i', 2, 0, function(firstPage) {
                        assert.strictEqual(firstPage.results.length, 2);
                        var firstPageById = _.indexBy(firstPage.results, 'id');

                        // Get the third user
                        UsersTestsUtil.assertGetUsers(globalAdminClient, app.id, 'i', 2, 2, function(secondPage) {
                            assert.strictEqual(secondPage.results.length, 1);

                            // Assert the user from the second page is not returned in the first page's results
                            assert.ok(!firstPageById[secondPage.results[0].id]);
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation when searching for users
     */
    it('verify validation when searching for users', function(callback) {
        // Invalid app id
        UsersTestsUtil.assertGetUsersFails(global.tests.admins.cam2013.client, 'Not a number', null, null, null, 400, function() {
            // The other parameters cannot be tested as they are either optional or defaulted to proper values if invalid
            return callback();
        });
    });

    /**
     * Test that verifies authorization when searching for users
     */
    it('verify authorization when searching for users', function(callback) {
        _setup(global.tests.apps.cam2013, function(jack, william, shirley) {

            // Anonymous users can't search/page users
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                UsersTestsUtil.assertGetUsersFails(anonymousClient, null, null, null, null, 401, function() {
                    UsersTestsUtil.assertGetUsersFails(anonymousClient, null, 'some query', null, null, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            UsersTestsUtil.assertGetUsersFails(anonymousGlobalAdminClient, null, null, null, null, 401, function() {
                                UsersTestsUtil.assertGetUsersFails(anonymousGlobalAdminClient, null, 'some query', null, null, 401, function() {

                                    // Regular user can't search/page users from another application
                                    UsersTestsUtil.assertGetUsersFails(jack.client, global.tests.apps.oxford2014.id, null, null, null, 401, function() {
                                        UsersTestsUtil.assertGetUsersFails(jack.client, global.tests.apps.oxford2014.id, 'some query', null, null, 401, function() {

                                            // Regular users can search/page users from their own app
                                            UsersTestsUtil.assertGetUsers(jack.client, null, null, null, null, function() {
                                                UsersTestsUtil.assertGetUsers(jack.client, null, 'some query', null, null, function() {

                                                    // App admins can't search/page users from another app
                                                    UsersTestsUtil.assertGetUsersFails(global.tests.admins.cam2013.client, global.tests.apps.oxford2014.id, null, null, null, 401, function() {
                                                        UsersTestsUtil.assertGetUsersFails(global.tests.admins.cam2013.client, global.tests.apps.oxford2014.id, 'some query', null, null, 401, function() {

                                                            // App admins can search/page users from their own app
                                                            UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, null, null, null, null, function() {
                                                                UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, null, 'some query', null, null, function() {
                                                                    UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, global.tests.apps.cam2013.id, null, null, null, function() {
                                                                        UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, global.tests.apps.cam2013.id, 'some query', null, null, function() {

                                                                            // Global admins can search/page users from any app
                                                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                                UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, global.tests.apps.cam2013.id, null, null, null, function() {
                                                                                    UsersTestsUtil.assertGetUsers(global.tests.admins.cam2013.client, global.tests.apps.cam2013.id, 'some query', null, null, function() {
                                                                                        return callback();
                                                                                    });
                                                                                });
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Assert whether personal information should be returned from the get/search users feed
     *
     * @param  {Object}         actor                   The object that holds the user and client to fetch the users
     * @param  {Number}         app                     The id of the application to search in
     * @param  {String}         [query]                 The query to filter users by
     * @param  {Boolean}        expectPersonalInfo      Whether user objects should have personal information
     * @param  {Function}       callback                Standard callback function
     */
    var expectUsers = function(actor, app, query, expectPersonalInfo, callback) {
        UsersTestsUtil.assertGetUsers(actor.client, app, query, null, null, function(users) {
            _.each(users.results, function(user) {
                // The display name can always be viewed
                assert.ok(user.displayName);

                // You can always view your own information
                if (user.id === actor.profile.id || expectPersonalInfo) {
                    UsersTestsUtil.assertUser(user, {'canViewAllFields': true});
                } else {
                    UsersTestsUtil.assertUser(user, {'canViewAllFields': false});
                }
            });
            return callback();
        });
    };

    /**
     * Test that verifies that personal information is not returned
     */
    it('verify personal information is not returned', function(callback) {
        TestsUtil.generateTestUsers(global.tests.apps.cam2014, 2, false, function(simon, nico) {

            // Regular users cannot see personal information through search
            expectUsers(simon, simon.profile.AppId, null, false, function() {
                expectUsers(simon, simon.profile.AppId, 'user', false, function() {

                    // Application admins can see personal information
                    expectUsers(global.tests.admins.cam2014, simon.profile.AppId, null, true, function() {
                        expectUsers(global.tests.admins.cam2014, simon.profile.AppId, 'user', true, function() {

                            // Global admins can see personal information
                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                var actor = {
                                    'client': globalAdminClient,
                                    'profile': {}
                                };
                                expectUsers(actor, simon.profile.AppId, null, true, function() {
                                    expectUsers(actor, simon.profile.AppId, 'user', true, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
