/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var TestsUtil = require('gh-tests/lib/util');

/**
 * Assert that the me feed can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.calendar               The retrieved me feed
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetMe = module.exports.assertGetMe = function(client, callback) {
    client.user.getMe(function(err, me) {
        assert.ok(!err);
        return callback(me);
    });
};

/**
 * Assert that the calendar for a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             start                           The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}             end                             The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Event[]}            expectedEvents                  A set of events that should be in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendar = module.exports.assertGetUserCalendar = function(client, id, start, end, expectedEvents, callback) {
    client.user.getUserCalendar(id, start, end, function(err, calendar) {
        assert.ok(!err);
        assert.ok(calendar);
        assert.ok(calendar.results);
        assert.ok(_.isArray(calendar.results));

        // Assert the calendar contains the expected events
        if (expectedEvents) {
            _.each(expectedEvents, function(event) {
                assert.ok(_.find(calendar.results, {'id': event.id}));
            });
        }

        return callback(calendar);
    });
};

/**
 * Assert that the calendar for a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             start                           The timestamp (ISO 8601) from which to get the calendar for the user
 * @param  {String}             end                             The timestamp (ISO 8601) until which to get the calendar for the user
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarFails = module.exports.assertGetUserCalendarFails = function(client, id, start, end, code, callback) {
    client.user.getUserCalendar(id, start, end, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Assert that the iCal calendar for a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Event[]}            expectedEvents                  A set of events that should be in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarICal = module.exports.assertGetUserCalendarICal = function(client, id, token, expectedEvents, callback) {
    client.user.getUserCalendarICal(id, token, function(err, calendar, response) {
        assert.ok(!err);
        assert.ok(calendar);

        // Assert the response is iCal
        assert.strictEqual(response.headers['content-type'], 'text/calendar; charset=utf-8');

        // Parse the iCal calendar
        TestsUtil.parseIcalCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                assert.strictEqual(calendar.subComponents.length, expectedEvents.length);
                _.each(calendar.subComponents, function(subComponent, i) {
                    var id = parseInt(subComponent.model.uid, 10);
                    assert.strictEqual(id, expectedEvents[i].id);
                    assert.strictEqual(subComponent.model.summary, expectedEvents[i].displayName);
                });
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that the iCal calendar for a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarICalFails = module.exports.assertGetUserCalendarICalFails = function(client, id, token, code, callback) {
    client.user.getUserCalendarICal(id, token, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Assert that the RSS calendar for a user can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Event[]}            expectedEvents                  A set of events that should be in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarRss = module.exports.assertGetUserCalendarRss = function(client, id, token, expectedEvents, callback) {
    client.user.getUserCalendarRss(id, token, function(err, calendar, response) {
        assert.ok(!err);
        assert.ok(calendar);

        // Assert the response is RSS
        assert.strictEqual(response.headers['content-type'], 'application/rss+xml; charset=utf-8');

        // Parss the RSS calendar
        TestsUtil.parseRssCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                if (_.isEmpty(expectedEvents)) {
                    // If no items should be returned, the RSS feed will not contain an `<item>` tag
                    assert.ok(!calendar.item);
                } else {
                    assert.strictEqual(calendar.item.length, expectedEvents.length);
                    _.each(calendar.item, function(item, i) {
                        var guid = item.guid[0];
                        var id = parseInt(guid.split('/').pop(), 10);
                        assert.strictEqual(id, expectedEvents[i].id);
                        assert.strictEqual(item.title[0], expectedEvents[i].displayName);
                    });
                }
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that the RSS calendar for a user can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the user to get the calendar for
 * @param  {String}             token                           The access control token
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetUserCalendarRssFails = module.exports.assertGetUserCalendarRssFails = function(client, id, token, code, callback) {
    client.user.getUserCalendarRss(id, token, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};
