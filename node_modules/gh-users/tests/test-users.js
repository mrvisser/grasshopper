/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');

var ConfigTestsUtil = require('gh-config/tests/util');
var RestAPI = require('gh-rest');
var TestsUtil = require('gh-tests/lib/util');

var UsersTestsUtil = require('./util');

describe('Users', function() {

    describe('Creating a user', function() {

        /**
         * Test that verifies that a user can be created
         */
        it('verify a user can be created', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                UsersTestsUtil.assertGetMe(simon.client, function(me) {
                    assert.strictEqual(me.displayName, simon.profile.displayName);
                    return callback();
                });
            });
        });

        /**
         * Verify validation when creating a user
         */
        it('verify validation when creating a user', function(callback) {
            var email = TestsUtil.generateTestEmailAddress();
            // Missing displayName
            UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, null, email, 'password', {'emailPreference': 'immediate'}, 400, function() {

                // Invalid display name
                var longDisplayName = TestsUtil.generateString(256);
                UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, longDisplayName, email, 'password', {'emailPreference': 'immediate'}, 400, function() {

                    // Missing email
                    UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, 'displayName', null, 'password', {'emailPreference': 'immediate'}, 400, function() {

                        // Invalid email
                        UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, 'displayName', 'not an email address', 'password', {'emailPreference': 'immediate'}, 400, function() {

                            // Missing password
                            UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, 'displayName', email, null, {'emailPreference': 'immediate'}, 400, function() {

                                // Invalid password
                                UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, 'displayName', email, '12', {'emailPreference': 'immediate'}, 400, function() {

                                    // Invalid email preference
                                    UsersTestsUtil.assertCreateUserFails(global.tests.admins.cam2014.client, 'displayName', email, 'password', {'emailPreference': 'uwotm8'}, 400, function() {

                                        // Invalid application id
                                        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                            UsersTestsUtil.assertCreateUserFails(globalAdminClient, 'displayName', email, 'password', {'emailPreference': 'immediate', 'app': 'Not a number'}, 400, function() {
                                                UsersTestsUtil.assertCreateUserFails(globalAdminClient, 'displayName', email, 'password', {'emailPreference': 'immediate', 'app': -1}, 404, function() {
                                                    UsersTestsUtil.assertCreateUserFails(globalAdminClient, 'displayName', email, 'password', {'emailPreference': 'immediate', 'app': 1231231}, 404, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify authorization when creating a user
         */
        it('verify authorization when creating a user', function(callback) {
            // Generate test tenant
            TestsUtil.generateTestTenant(1, function(tenant, app) {

                // Enable local account creation
                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                    var update = {'allowLocalAccountCreation': true};
                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, update, function() {

                        var email = TestsUtil.generateTestEmailAddress();

                        // Anonymous users can't create admin accounts
                        TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                            UsersTestsUtil.assertCreateUserFails(anonymousClient, 'displayName', email, 'password', {'emailPreference': 'immediate', 'isAdmin': true}, 401, function() {
                                TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                    UsersTestsUtil.assertCreateUserFails(anonymousGlobalClient, 'displayName', email, 'password', {'emailPreference': 'immediate', 'isAdmin': true, 'app': app.id}, 401, function() {

                                        // Regular users can't create accounts
                                        TestsUtil.generateTestUsers(app, 1, false, function(simon) {
                                            UsersTestsUtil.assertCreateUserFails(simon.client, 'displayName', email, 'password', {'emailPreference': 'immediate', 'isAdmin': true}, 401, function() {

                                                // The global admin can create an admin account
                                                UsersTestsUtil.assertCreateUser(globalAdminClient, 'displayName', email, 'password', {'emailPreference': 'immediate', 'isAdmin': true, 'app': app.id}, function(adminUser) {

                                                    // Application admins can create an admin account
                                                    // Create a REST client for the created user
                                                    var options = {
                                                        'host': 'localhost:2001',
                                                        'hostHeader': app.host,
                                                        'authenticationStrategy': 'local',
                                                        'username': email,
                                                        'password': 'password'
                                                    };

                                                    RestAPI.createClient(options, function(err, client) {
                                                        assert.ok(!err);
                                                        var email2 = TestsUtil.generateTestEmailAddress();
                                                        UsersTestsUtil.assertCreateUser(client, 'displayName', email2, 'password', {'emailPreference': 'immediate', 'isAdmin': true}, function(adminUser) {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an email address has to be unique within an application
         */
        it('verify an email address has to be unique within an application', function(callback) {
            // Generate test tenant
            TestsUtil.generateTestTenant(2, function(tenant, app1, app2) {

                // Enable local account creation
                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                    var update = {'allowLocalAccountCreation': true};
                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app1.id, update, function() {
                        ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app2.id, update, function() {

                            TestsUtil.getAnonymousAppUserClient(app1, function(app1Client) {
                                TestsUtil.getAnonymousAppUserClient(app2, function(app2Client) {

                                    // Create a user on app 1
                                    var email = TestsUtil.generateTestEmailAddress();
                                    UsersTestsUtil.assertCreateUser(app1Client, 'displayName', email, 'password', {'emailPreference': 'immediate'}, function(user) {

                                        // We can't create another user with the same email address
                                        UsersTestsUtil.assertCreateUserFails(app1Client, 'displayName', email, 'password', {'emailPreference': 'immediate'}, 400, function(user) {

                                            // We can create a user on another application with the same email address
                                            UsersTestsUtil.assertCreateUser(app2Client, 'displayName', email, 'password', {'emailPreference': 'immediate'}, function(user) {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that account creation can be disabled
         */
        it('verify account creation can be disabled', function(callback) {
            // Generate test tenant
            TestsUtil.generateTestTenant(1, function(tenant, app) {

                // Disable local account creation
                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                    var update = {'allowLocalAccountCreation': false};
                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, update, function() {

                        // Assert we can't create a local account
                        TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                            var email = TestsUtil.generateTestEmailAddress();
                            UsersTestsUtil.assertCreateUserFails(anonymousClient, 'displayName', email, 'password', {'emailPreference': 'immediate'}, 401, function() {

                                // Enable local acount creation
                                var update = {'allowLocalAccountCreation': true};
                                ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, update, function() {

                                    // Assert we can now create a local account
                                    UsersTestsUtil.assertCreateUser(anonymousClient, 'displayName', email, 'password', {'emailPreference': 'immediate'}, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting a user', function() {

        /**
         * Test that verifies that a user can be retrieved
         */
        it('verify a user can be retrieved', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                UsersTestsUtil.assertGetUser(simon.client, simon.profile.id, function(user) {
                    UsersTestsUtil.assertUser(user, {'expectedUser': simon.profile, 'canViewAllFields': true});
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when retrieving a user
         */
        it('verify validation when retrieving a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                UsersTestsUtil.assertGetUserFails(simon.client, 'Not a number', 400, function() {
                    UsersTestsUtil.assertGetUserFails(simon.client, -1, 404, function() {
                        UsersTestsUtil.assertGetUserFails(simon.client, 234234233, 404, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when retrieving a user
         */
        it('verify authorization when retrieving a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(camUser) {
                TestsUtil.generateTestUsers(global.tests.apps.oxford2013, 1, false, function(oxUser) {

                    // Users from other applications cannot be retrieved by regular users
                    UsersTestsUtil.assertGetUserFails(camUser.client, oxUser.profile.id, 401, function() {

                        // Users from other applications cannot be retrieved by application admins users
                        UsersTestsUtil.assertGetUserFails(global.tests.admins.cam2014.client, oxUser.profile.id, 401, function() {

                            // Users from other applications can be retrieved by global admins
                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                UsersTestsUtil.assertGetUser(globalAdminClient, oxUser.profile.id, function() {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that personal information is not returned
         */
        it('verify personal information is not returned', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 2, false, function(simon, nico) {

                // Simon can view his own information
                UsersTestsUtil.assertGetUser(simon.client, simon.profile.id, function(user) {
                    UsersTestsUtil.assertUser(user, {'expectedUser': simon.profile, 'canViewAllFields': true});

                    // Nico can retrieve the profile but not the personal information
                    UsersTestsUtil.assertGetUser(nico.client, simon.profile.id, function(user) {
                        UsersTestsUtil.assertUser(user, {'expectedUser': simon.profile, 'canViewAllFields': false});

                        // An application administrator from the same app can view Simon's personal information
                        UsersTestsUtil.assertGetUser(global.tests.admins.cam2014.client, simon.profile.id, function(user) {
                            UsersTestsUtil.assertUser(user, {'expectedUser': simon.profile, 'canViewAllFields': true});

                            // A global admin can see Simon's personal information
                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                UsersTestsUtil.assertGetUser(globalAdminClient, simon.profile.id, function(user) {
                                    UsersTestsUtil.assertUser(user, {'expectedUser': simon.profile, 'canViewAllFields': true});
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Updating a user', function() {

        /**
         * Test that verifies that a user can be updated
         */
        it('verify a user can be updated', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                // Update the user
                var update = {
                    'displayName': 'Simon',
                    'email': TestsUtil.generateTestEmailAddress()
                };
                UsersTestsUtil.assertUpdateUser(simon.client, simon.profile.id, update, function(updatedUser) {

                    // Verify the update has been persisted
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {
                        assert.strictEqual(me.displayName, update.displayName);
                        assert.strictEqual(me.email, update.email);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation when updating a user
         */
        it('verify validation when updating a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                // Invalid user id
                UsersTestsUtil.assertUpdateUserFails(simon.client, 'Not a number', {'displayName': 'bleh'}, 400, function() {
                    // Unknown user id
                    UsersTestsUtil.assertUpdateUserFails(simon.client, -1, {'displayName': 'bleh'}, 404, function() {

                        // Missing update parameters
                        UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {}, 400, function() {

                            // Unknown update parameter
                            UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'foo': 'bar'}, 400, function() {

                                // Missing value
                                UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'displayName': null}, 400, function() {

                                    // Invalid parameters
                                    UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'email': 'not an email address'}, 400, function() {
                                        UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'emailPreference': 'lolwhat'}, 400, function() {

                                            // Too long displayName
                                            var longDisplayName = TestsUtil.generateString(256);
                                            UsersTestsUtil.assertUpdateUserFails(simon.client, simon.profile.id, {'displayName': longDisplayName}, 400, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when updating a user
         */
        it('verify authorization when updating a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 2, false, function(simon, nico) {

                // Update the user
                var update = {
                    'displayName': 'Simon',
                    'email': TestsUtil.generateTestEmailAddress()
                };

                // Anonymous users can't update other users
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2014, function(anonymousClient) {
                    UsersTestsUtil.assertUpdateUserFails(anonymousClient, simon.profile.id, update, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            UsersTestsUtil.assertUpdateUserFails(anonymousGlobalAdminClient, simon.profile.id, update, 401, function() {

                                // Regular users can't update other users
                                UsersTestsUtil.assertUpdateUserFails(nico.client, simon.profile.id, update, 401, function() {

                                    // Application admins can't update users from other applications
                                    UsersTestsUtil.assertUpdateUserFails(global.tests.admins.oxford2013.client, simon.profile.id, update, 401, function() {

                                        // Users can update their own profile
                                        UsersTestsUtil.assertUpdateUser(simon.client, simon.profile.id, update, function() {

                                            // App admins can update users from their application
                                            UsersTestsUtil.assertUpdateUser(global.tests.admins.cam2014.client, simon.profile.id, update, function() {

                                                // Global admins can update users
                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                    UsersTestsUtil.assertUpdateUser(globalAdminClient, simon.profile.id, update, function() {

                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a user cannot use another user's email address
         */
        it('verify a user cannot use another user\'s email address', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 2, false, function(simon, nico) {

                // Nico shouldn't be able to re-use Simon's email address
                UsersTestsUtil.assertUpdateUserFails(nico.client, nico.profile.id, {'email': simon.profile.email}, 400, function() {
                    return callback();
                });
            });
        });
    });

    describe('Updating the admin status of a user', function() {

        /**
         * Test that verifies that the admin status of a user can be updated
         */
        it('verify the admin status of a user can be updated', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                // Update the admin status of the user
                UsersTestsUtil.assertUpdateAdminStatus(global.tests.admins.cam2014.client, simon.profile.id, true, function(updatedUser) {

                    // Verify the update has been persisted
                    UsersTestsUtil.assertGetMe(simon.client, function(me) {
                        assert.strictEqual(me.isAdmin, true);

                        // Remove the admin status
                        UsersTestsUtil.assertUpdateAdminStatus(global.tests.admins.cam2014.client, simon.profile.id, false, function(updatedUser) {

                            // Verify the update has been persisted
                            UsersTestsUtil.assertGetMe(simon.client, function(me) {
                                assert.strictEqual(me.isAdmin, false);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when updating the admin status of a user
         */
        it('verify validation when updating the admin status of a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {

                // Invalid user id
                UsersTestsUtil.assertUpdateAdminStatusFails(global.tests.admins.cam2014.client, 'Not a number', true, 400, function() {
                    // Unknown user id
                    UsersTestsUtil.assertUpdateAdminStatusFails(global.tests.admins.cam2014.client, -1, true, 404, function() {

                        // Missing admin flag
                        UsersTestsUtil.assertUpdateAdminStatusFails(global.tests.admins.cam2014.client, simon.profile.id, null, 400, function() {

                            // Invalid admin flag
                            UsersTestsUtil.assertUpdateAdminStatusFails(global.tests.admins.cam2014.client, simon.profile.id, 'Not a boolean', 400, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when updating the admin status of a user
         */
        it('verify authorization when updating the admin status of a user', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2014, 2, false, function(simon, nico) {

                // Anonymous users can't update the admin status of other users
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2014, function(anonymousClient) {
                    UsersTestsUtil.assertUpdateAdminStatusFails(anonymousClient, simon.profile.id, true, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            UsersTestsUtil.assertUpdateAdminStatusFails(anonymousGlobalAdminClient, simon.profile.id, true, 401, function() {

                                // Regular users can't update the admin status of other users
                                UsersTestsUtil.assertUpdateAdminStatusFails(nico.client, simon.profile.id, true, 401, function() {

                                    // Application admins can't update the admin status of users from other applications
                                    UsersTestsUtil.assertUpdateAdminStatusFails(global.tests.admins.oxford2013.client, simon.profile.id, true, 401, function() {

                                        // Regular users can't update their own admin status
                                        UsersTestsUtil.assertUpdateAdminStatusFails(simon.client, simon.profile.id, true, 401, function() {

                                            // App admins can update the admin status of users from their application
                                            UsersTestsUtil.assertUpdateAdminStatus(global.tests.admins.cam2014.client, simon.profile.id, true, function() {

                                                // Global admins can update users
                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                    UsersTestsUtil.assertUpdateAdminStatus(globalAdminClient, nico.profile.id, true, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
