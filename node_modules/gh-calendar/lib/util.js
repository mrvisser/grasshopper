/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var VCalendar = require('cozy-ical').VCalendar;
var VEvent = require('cozy-ical').VEvent;
var VTodo = require('cozy-ical').VTodo;

/**
 * Format a set of events into an iCalendar feed
 *
 * @param  {CalendarInfo}   calendarInfo    More information about the calendar
 * @param  {Event[]}        events          The events that should be in the iCalendar feed
 * @return {String}                         The iCalendar feed
 */
var eventsToICal = module.exports.eventsToICal = function(calendarInfo, events) {
    // Construct a calendar
    var calendar = new VCalendar({
        'organization': calendarInfo.organisation,
        'title': calendarInfo.displayName
    });

    // Convert each Grasshopper event to an ical VEvent and add it to the calendar
    _.each(events, function(event) {
        var vevent = new VEvent({
            'startDate': event.start,
            'endDate': event.end,
            'created': event.createdAt,
            'stampDate': event.updatedAt,
            'summary': event.displayName,
            'description': event.organiser,
            'location': event.location,
            'uid': event.id
        });
        calendar.add(vevent);
    });

    // Return the calendar
    return calendar.toString();
};

/**
 * Format a set of events into an RSS feed
 *
 * @param  {CalendarInfo}   calendarInfo    More information about the calendar
 * @param  {Event[]}        events          The events that should be in the RSS feed
 * @return {String}                         The RSS feed
 */
var eventsToRSS = module.exports.eventsToRSS = function(calendarInfo, events) {
    var header = [
        '<rss version="2.0" xmlns:cf="http://www.microsoft.com/schemas/rss/core/2005" ',
            'xmlns:ev="http://purl.org/rss/1.0/modules/event/">',
        '<channel>'
    ];
    var calendar = [
        '<cf:treatAs>list</cf:treatAs>',
        '<cf:listinfo>',
        '<cf:sort ns="http://purl.org/rss/1.0/modules/event/" element="startdate" data-type="date" label="Start time" default="true"/>',
        '</cf:listinfo>',
        '<title>', calendarInfo.displayName, '</title>',
        '<link>', calendarInfo.link, '</link>',
        '<managingEditor>', calendarInfo.editor, '</managingEditor>',
        '<pubDate>', _formatRSSDate(calendarInfo.lastModified), '</pubDate>',
        '<description>', calendarInfo.description, '</description>'
    ];

    events = _.map(events, function(event) {
        var eventRSS = [
            '<item>',
                '<title>', event.displayName, '</title>',
                '<description>', event.description, '</description>',
                '<pubDate>', _formatRSSDate(event.lastModified), '</pubDate>',
                '<link>', _createRSSLink(calendarInfo, event), '</link>',
                '<guid>', _createRSSLink(calendarInfo, event), '</guid>',
                '<ev:startdate>', _formatRSSDate(event.start), '</ev:startdate>',
                '<ev:enddate>', _formatRSSDate(event.end), '</ev:enddate>',
                '<ev:location>', event.location, '</ev:location>',
                '<ev:organizer/>', //TODO
            '</item>'
        ];
        return eventRSS.join('');
    });

    var footer = ['</channel>', '</rss>'];

    var rss = header.join('');
    rss += calendar.join('');
    rss += events.join('');
    rss += footer.join('');
    return rss;
};

/**
 * Create a link for an event
 *
 * @param  {CalendarInfo}   calendarInfo    The info object for the calendar
 * @param  {Event}          event           The event for which to create the link
 * @return {String}                         A link for the event
 * @api private
 */
var _createRSSLink = function(calendarInfo, event) {
    return 'https://' + calendarInfo.host + '/events/' + event.id;
};

/**
 * Returns an RFC 822 compliant datetime string
 *
 * @param  {Date}       date    The date to format
 * @return {String}             The RFC 822 formatted timestamp
 * @api private
 */
var _formatRSSDate = function(date) {
    if (!date) {
        return '';
    }

    return date.toUTCString();
};
