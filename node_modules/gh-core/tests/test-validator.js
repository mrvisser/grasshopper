/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');

var TestsUtil = require('gh-tests/lib/util');

var Context = require('gh-context').Context;
var DB = require('gh-core/lib/db');
var Validator = require('gh-core/lib/validator').Validator;

describe('Validator', function() {

    /*it('verify undefined gets checked as empty', function(callback) {
        var validator = new Validator();
        validator.check(undefined, 'foo').notEmpty();
        assert.ok(validator.hasErrors());

        return callback();
    });*/

    /**
     * Test that verifies the empty validator
     */
    it('verify empty validator', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check('Non-empty string').notEmpty();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('').notEmpty();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        validator = new Validator();
        validator.check(' ').notEmpty();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check('Non').notEmpty();
        validator.check('Empty').notEmpty();
        validator.check('String').notEmpty();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check(undefined).notEmpty();
        validator.check(null).notEmpty();
        validator.check('').notEmpty();
        validator.check(' ').notEmpty();
        validator.check('   ').notEmpty();
        validator.check('String').notEmpty();
        assert.ok(validator.hasErrors());
        assert.strictEqual(validator.getErrors().length, 5);
        assert.strictEqual(validator.getErrorCount(), 5);

        return callback();
    });

    /**
     * Test that verifies the integer validator
     */
    it('verify integer validator', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check(10).isInt();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        validator = new Validator();
        validator.check('20').isInt();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('String').isInt();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check(0).isInt();
        validator.check(1).isInt();
        validator.check(100).isInt();
        validator.check(-100).isInt();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check('').isInt();
        validator.check('10').isInt();
        validator.check('String').isInt();
        validator.check(100).isInt();
        assert.ok(validator.hasErrors());
        assert.strictEqual(validator.getErrors().length, 2);
        assert.strictEqual(validator.getErrorCount(), 2);

        return callback();
    });

    /**
     * Test that verifies the email validator
     */
    it('verify email validator', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('nicolaas matthijs@caret.cam.ac.uk').isEmail();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        validator = new Validator();
        validator.check('http://www.google.co.uk').isEmail();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
        validator.check('bertpareyn@gmail.com').isEmail();
        validator.check('sfmorgan@btinternet.com').isEmail();
        validator.check('sally.phillips+unique_reference@gmail.com').isEmail();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check('').isEmail();
        validator.check('String').isEmail();
        validator.check('nicolaas matthijs@caret.cam.ac.uk').isEmail();
        validator.check('nicolaas.matthijs@caret.cam.ac.uk').isEmail();
        assert.ok(validator.hasErrors());
        assert.strictEqual(validator.getErrors().length, 3);
        assert.strictEqual(validator.getErrorCount(), 3);

        return callback();
    });

    /**
     * Test that verifies the URL validator
     */
    it('verify URL validator', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check('http://www.oaeproject.org').isUrl();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        validator = new Validator();
        validator.check('http://example.com/assert.html').isUrl();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('String').isUrl();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        validator = new Validator();
        validator.check('://www.google.co.uk').isUrl();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check('https://oae-widgets.oaeproject.org/sdk').isUrl();
        validator.check('http://support.google.com/docs/bin/answer.py?hl=en&answer=66343').isUrl();
        validator.check('http://www.w3.org/2004/02/skos/core#broader').isUrl();
        validator.check('https://wordpress.org/support/topic/plugin-addthis-odd-url-string?replies=5').isUrl();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check('').isUrl();
        validator.check('String').isUrl();
        validator.check('www.example.com').isUrl();
        validator.check('https://twimg0-a.akamaihd.net/profile_images/300425859/ls_1278_Nicolaas-website.jpg').isUrl();
        assert.ok(validator.hasErrors());
        assert.strictEqual(validator.getErrors().length, 2);
        assert.strictEqual(validator.getErrorCount(), 2);

        return callback();
    });


    /**
     * Create 3 users on an application and a global admin
     *
     * @param  {App}                app                     The application on which to create the regular users
     * @param  {Function}           callback                Standard callback function
     * @param  {DB.User}            callback.user1          The first user
     * @param  {DB.User}            callback.user2          The second user
     * @param  {DB.User}            callback.user3          The third user
     * @param  {DB.GlobalAdmin}     callback.globalAdmin    A global admin user
     * @throws {AssertionError}                             Error thrown when an assertion failed
     */
    var createUsers = function(app, callback) {
        DB.User.create({
            'AppId': app.id,
            'displayName': 'User 1',
            'email': TestsUtil.generateTestEmailAddress(),
            'authenticationStrategy': 'local',
            'calendarToken': '123'
        }).complete(function(err, user1) {
            assert.ok(!err);
            DB.User.create({
                'AppId': app.id,
                'displayName': 'User 2',
                'email': TestsUtil.generateTestEmailAddress(),
                'authenticationStrategy': 'local',
                'calendarToken': '123'
            }).complete(function(err, user2) {
                assert.ok(!err);
                DB.User.create({
                    'AppId': app.id,
                    'displayName': 'User 3',
                    'email': TestsUtil.generateTestEmailAddress(),
                    'authenticationStrategy': 'local',
                    'calendarToken': '123'
                }).complete(function(err, user3) {
                    assert.ok(!err);

                    DB.GlobalAdmin.create({
                        'displayName': 'Global Admin',
                        'username': TestsUtil.generateString(50),
                        'password': TestsUtil.generateString(16),
                    }).complete(function(err, globalAdmin) {
                        assert.ok(!err);
                        return callback(user1, user2, user3, globalAdmin);
                    });
                });
            });
        });
    };

    /**
     * Test whether or not the validator used to check for a logged in user is working as intended
     */
    it('verify isLoggedInUser correctly validates that the context is authenticated', function(callback) {
        createUsers(global.tests.apps.cam2013, function(user1, user2, user3) {

            // Valid app
            var app1 = global.tests.apps.cam2013;
            // Invalid app
            var app2 = DB.App.build({'displayName': 'Test app', 'host': 'foo.com'});

            ////////////////////////////
            // Single test successful //
            ////////////////////////////

            var validator = new Validator();
            validator.check().isLoggedInUser(new Context(app1, user1));
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
            assert.equal(validator.getErrorCount(), 0);

            ////////////////////////
            // Single test failed //
            ////////////////////////

            // Empty context
            validator = new Validator();
            validator.check().isLoggedInUser(null);
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            assert.equal(validator.getErrorCount(), 1);

            // App, no user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(app1, null));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            assert.equal(validator.getErrorCount(), 1);

            // No app, user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(null, user1));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            assert.equal(validator.getErrorCount(), 1);

            // Invalid app, user
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(app2, user1));
            assert.ok(validator.hasErrors());
            assert.ok(validator.getErrors());
            assert.equal(validator.getErrorCount(), 1);

            //////////////////////
            // Multiple success //
            //////////////////////

            validator = new Validator();
            validator.check().isLoggedInUser(new Context(app1, user1));
            validator.check().isLoggedInUser(new Context(app1, user2));
            validator.check().isLoggedInUser(new Context(app1, user3));
            assert.ok(!validator.hasErrors());
            assert.ok(!validator.getErrors());
            assert.equal(validator.getErrorCount(), 0);

            // Multiple fail
            validator = new Validator();
            validator.check().isLoggedInUser(new Context(app1, null));
            validator.check().isLoggedInUser(new Context(app2, user1));
            validator.check().isLoggedInUser(new Context(app2, user2));
            validator.check().isLoggedInUser(new Context(app1, user1));
            validator.check().isLoggedInUser(new Context(app1, user2));
            validator.check().isLoggedInUser(new Context(app1, user3));
            assert.ok(validator.hasErrors());
            assert.equal(validator.getErrors().length, 3);
            assert.equal(validator.getErrorCount(), 3);

            return callback();
        });
    });
    
    /**
     * Test that verifies the isLoggedInUser validator works when determining if a request context is authenticated to a
     * particular application
     */
    it('verify isLoggedInUser correctly validates that the request context is authenticated to a particular application', function(callback) {
        createUsers(global.tests.apps.cam2013, function(user1, user2, user3, globalAdminUser) {
            var globalAdminApp = TestsUtil.getGlobalAdminApp();

            // Ensure it gives a validation error when not authenticated
            var validator = new Validator();
            validator.check().isLoggedInUser(new Context(global.tests.apps.cam2013), global.tests.apps.cam2013.id);
            assert.strictEqual(validator.getErrors().length, 1);

            // Ensure it gives a validation error when authenticated to a different application
            validator.check().isLoggedInUser(new Context(global.tests.apps.cam2014, user1), global.tests.apps.cam2014.id);
            assert.strictEqual(validator.getErrors().length, 2);

            // Ensure it succeeds when authenticated to the correct application
            validator.check().isLoggedInUser(new Context(global.tests.apps.cam2013, user1), global.tests.apps.cam2013.id);
            assert.strictEqual(validator.getErrors().length, 2);

            // Ensure it succeeds when authenticated to the global admin
            validator.check().isLoggedInUser(new Context(globalAdminApp, globalAdminUser), global.tests.apps.cam2013.id);
            assert.strictEqual(validator.getErrors().length, 2);
            return callback();
        });
    });

    /**
     * Test that verifies validation results for a variety of inputs to validator.isGlobalAdmin
     */
    it('verify isGlobalAdmin validation', function(callback) {
        createUsers(global.tests.apps.cam2013, function(user1, user2, user3, globalAdminUser) {
            var anonymousAppCtx = new Context(global.tests.apps.cam2013, null);
            var authenticatedAppCtx = new Context(global.tests.apps.cam2013, user1);
            user2.isAdmin = true;
            var authenticatedAppAdminCtx = new Context(global.tests.apps.cam2013, user2);

            var globalAdminApp = TestsUtil.getGlobalAdminApp();
            var anonymousGlobalCtx = new Context(globalAdminApp, null);
            var authenticatedGlobalCtx = new Context(globalAdminApp, globalAdminUser);

            var validator = new Validator();
            validator.check().isGlobalAdmin(undefined);
            validator.check().isGlobalAdmin(null);
            validator.check().isGlobalAdmin({});
            validator.check().isGlobalAdmin(anonymousAppCtx);
            validator.check().isGlobalAdmin(authenticatedAppCtx);
            validator.check().isGlobalAdmin(authenticatedAppCtx);
            validator.check().isGlobalAdmin(anonymousGlobalCtx);
            validator.check().isGlobalAdmin(authenticatedGlobalCtx);

            // 8 checks, only 1 was valid
            var errors = validator.getErrors();
            assert.strictEqual(errors.length, 7);
            return callback();
        });
    });

    // TODO: isObject validator

    /**
     * Test that verifies the isArray validator
     */
    it('verify isArray validation', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check().isArray([1, 2, 3]);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        validator = new Validator();
        validator.check().isArray([1]);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        validator = new Validator();
        validator.check().isArray([]);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check().isArray('A string');
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check().isArray([1, 2, 3]);
        validator.check().isArray([1]);
        validator.check().isArray(['Element 1', 'Element 2']);
        validator.check().isArray(['Element']);
        validator.check().isArray([{'id': 1}, {'id': 2}]);
        validator.check().isArray([null, null]);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check().isArray(null);
        validator.check().isArray(undefined);
        validator.check().isArray('A string');
        validator.check().isArray([1, 2, 3]);
        validator.check().isArray([1]);
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 3);

        return callback();
    });

    /**
     * Test that verifies the isBoolean validator
     */
    it('verify isBoolean validation', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check().isBoolean(true);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        validator = new Validator();
        validator.check().isBoolean(false);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check().isBoolean('A string');
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check().isBoolean(true);
        validator.check().isBoolean(false);
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check().isBoolean('true');
        validator.check().isBoolean('false');
        validator.check().isBoolean(0);
        validator.check().isBoolean(1);
        validator.check().isBoolean({});
        validator.check().isBoolean([]);
        validator.check().isBoolean(null);
        validator.check().isBoolean(undefined);
        validator.check().isBoolean(true);
        validator.check().isBoolean(false);
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 8);

        return callback();
    });

    /**
     * Test that verifies the isShortString validator
     */
    it('verify isShortString validation', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check('A short string').isShortString();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('').isShortString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        validator = new Validator();
        validator.check(TestsUtil.generateString(257)).isShortString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check('A').isShortString();
        validator.check('Short string').isShortString();
        validator.check(TestsUtil.generateString(256)).isShortString();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check('').isShortString();
        validator.check(TestsUtil.generateString(257)).isShortString();
        validator.check(TestsUtil.generateString(1000)).isShortString();
        validator.check(null).isShortString();
        validator.check(undefined).isShortString();
        validator.check('A short string').isShortString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 5);

        return callback();
    });

    /**
     * Test that verifies validation results for a variety of inputs to validator.isMediumString
     */
    it('verify isMediumString validation', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check('A medium string').isMediumString();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('').isMediumString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        validator = new Validator();
        validator.check(TestsUtil.generateString(10001)).isMediumString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check('A').isMediumString();
        validator.check('Medium string').isMediumString();
        validator.check(TestsUtil.generateString(1000)).isMediumString();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check('').isMediumString();
        validator.check(TestsUtil.generateString(1001)).isMediumString();
        validator.check(TestsUtil.generateString(2000)).isMediumString();
        validator.check(null).isMediumString();
        validator.check(undefined).isMediumString();
        validator.check('A medium string').isMediumString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 5);
        return callback();
    });

    /**
     * Test that verifies the isLongString validator
     */
    it('verify isLongString validation', function(callback) {
        // Single test successful
        var validator = new Validator();
        validator.check('A long string').isLongString();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Single test failed
        validator = new Validator();
        validator.check('').isLongString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        validator = new Validator();
        validator.check(TestsUtil.generateString(10001)).isLongString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 1);

        // Multiple success
        validator = new Validator();
        validator.check('A').isLongString();
        validator.check('Long string').isLongString();
        validator.check(TestsUtil.generateString(10000)).isLongString();
        assert.ok(!validator.hasErrors());
        assert.ok(!validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 0);

        // Multiple fail
        validator = new Validator();
        validator.check('').isLongString();
        validator.check(TestsUtil.generateString(10001)).isLongString();
        validator.check(TestsUtil.generateString(25000)).isLongString();
        validator.check(null).isLongString();
        validator.check(undefined).isLongString();
        validator.check('A short string').isLongString();
        validator.check(TestsUtil.generateString(257)).isLongString();
        assert.ok(validator.hasErrors());
        assert.ok(validator.getErrors());
        assert.strictEqual(validator.getErrorCount(), 5);
        return callback();
    });
});
