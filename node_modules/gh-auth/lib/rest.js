/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var passport = require('passport');
var util = require('util');

var GrassHopper = require('gh-core');

var AuthenticationUtil = require('./util');
var ShibbolethAPI = require('./api.shibboleth');

/**
 * @REST logout
 *
 * Log out
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/logout
 * @Return      {void}
 */
var logout = function(req, res) {
    // Kill the user session
    req.logout();

    // Redirect the user to the main landing page
    return res.redirect('/');
};

GrassHopper.globalAdminRouter.on('post', '/api/auth/logout', logout);
GrassHopper.appRouter.on('post', '/api/auth/logout', logout);


//////////////////////////
// Local authentication //
//////////////////////////

/**
 * @REST localLogin
 *
 * Log in using local authentication
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/login
 * @FormParam   {string}            password                The password for the user
 * @FormParam   {string}            username                The username for the user
 * @Return      {User}                                      The logged in user
 */
var localLogin = function(req, res, next) {
    passport.authenticate('local', function(err, authInfo) {
        if (err) {
            return next(err);
        } else if (!authInfo || !authInfo.user) {
            return res.status(401).end();
        }

        // Create the user session
        req.logIn(authInfo, function(err) {
            if (err) {
                return next(err);
            }

            return res.status(200).send(req.user);
        });
    })(req, res, next);
};

GrassHopper.globalAdminRouter.on('post', '/api/auth/login', localLogin);
GrassHopper.appRouter.on('post', '/api/auth/login', localLogin);

/**
 * @REST changePassword
 *
 * Change a user's local password
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/password
 * @PathParam   {string}            id                      The id of user for which to change the local password
 * @FormParam   {string}            newPassword             The new password for the user
 * @FormParam   {string}            [oldPassword]           The previous password for the user. This is only required when the current user is not an administrator
 * @Return      {void}
 */
var changePassword = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/users/:id/password', changePassword);
GrassHopper.appRouter.on('post', '/api/users/:id/password', changePassword);


///////////////////////////////
// Shibboleth authentication //
///////////////////////////////

/**
 * @REST shibbolethLogin
 *
 * Log in using Shibboleth authentication
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/shibboleth
 * @Return      {void}
 */
GrassHopper.appRouter.on('post', '/api/auth/shibboleth', function(req, res) {
    if (!ShibbolethAPI.isEnabled(req.ctx)) {
        return res.redirect('/?authentication=disabled');
    }

    // Get the URL to which the user should be redirected and store it in a cookie,
    // so we can retrieve it once the user returns from the identity provider
    var redirectUrl = AuthenticationUtil.validateRedirectUrl(req.param('redirectUrl'));
    res.cookie('redirectUrl', redirectUrl);

    // Redirect the user to our SP host
    var serviceProviderUrl = ShibbolethAPI.getServiceProviderUrl(req.ctx);
    res.redirect(serviceProviderUrl);
});

/**
 * @REST redirectToIdentityProvider
 *
 * Redirect the user to the configured identity provider
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp
 * @QueryParam  {string}            [app]                   The id of the app on which the user wants to authenticate
 * @QueryParam  {string}            [signature]             The signature for the app id
 * @QueryParam  {number}            [expires]               The timestamp (ISO 8601) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appRouter.on('post', '/api/auth/shibboleth/sp', function(req, res, next) {
    if (ShibbolethAPI.getSPHost() !== req.hostname) {
        return res.status(501).send('This endpoint is not enabled on a regular app');
    }

    var appId = req.query.appId;
    var signature = req.query.signature;
    var expires = req.query.expires;

    // Validate the parameters
    ShibbolethAPI.validateInitiateParameters(appId, signature, expires, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        // Keep track of the application from which the user originated
        res.cookie('shibboleth', appId, {'signed': true});

        // Get the generic error handler
        var errorHandler = AuthenticationUtil.handlePassportError(req, res, next);

        // Get the URL to which the user should be redirected and store it in a cookie,
        // so we can retrieve it once the user returns from the external authentication source
        var redirectUrl = AuthenticationUtil.validateRedirectUrl(req.param('redirectUrl'));
        res.cookie('redirectUrl', redirectUrl);

        // Initiate the authentication process
        passport.authenticate('shibboleth', app)(req, res, errorHandler);
    });
});

/**
 * @REST identityProviderCallback
 *
 * Authenticate the user and redirect back to the originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp/callback
 * @Return      {void}
 */
GrassHopper.appRouter.on('get', '/api/auth/shibboleth/sp/callback', function(req, res) {
    if (ShibbolethAPI.getSPHost() !== req.hostname) {
        return res.status(501).send('This endpoint is not enabled on a regular tenant');
    }

    // Get the id of the application this user originated from
    var appId = req.signedCookies.shibboleth;

    // Remove the cookie
    res.clearCookie('shibboleth');

    // Get the full app object to allow for the full URL to be constructed
    ShibbolethAPI.getShibbolethEnabledApplication(appId, function(err, app) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        // The base url for the app
        var appUrl = util.format('https://%s', app.host);

        // Validate and authenticate the request
        passport.authenticate('shibboleth', app, function(err, user, challenges, status) {
            if (err) {
                log().error({'err': err, 'tenantAlias': tenantAlias}, 'Error during Shibboleth authentication');
                return res.redirect(appUrl + '/?authentication=failed&reason=error');
            } else if (!user) {
                // The user's credentials didn't check out. This would rarely occur in a
                // normal situation as external auth providers don't usually redirect with
                // bad parameters in the request, so somebody is probably tampering with it.
                // We bail out immediately
                log().warn({'challenges': challenges, 'status': status}, 'Possible tampering of external callback request detected');
                return res.redirect(appUrl + '/?authentication=failed&reason=tampering');
            }

            // The user's authentication credentials are correct and the user was created
            // or retrieved from the database. Send the user back to their own app and pass
            // along their user id
            var redirectUrl = ShibbolethAPI.getAuthenticatedUserRedirectUrl(app, user);
            res.redirect(redirectUrl);
        })(req, res);
    });
});

/**
 * @REST redirectToOriginatingApp
 *
 * Redirect an authenticated user back to their originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/callback
 * @QueryParam  {number}            [userId]                The id of the user that needs to be signed in
 * @QueryParam  {string}            [signature]             The signature for the user id
 * @QueryParam  {number}            [expires]               The timestamp (ISO 8601) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appRouter.on('get', '/api/auth/shibboleth/callback', function(req, res) {
    if (!ShibbolethAPI.isEnabled(req.ctx)) {
        return res.redirect('/?authentication=disabled');
    }

    // Get the user from the database
    var userId = req.query.userId;
    var signature = req.query.signature;
    var expires = req.query.expires;
    ShibbolethAPI.getUser(req.ghApp, userId, signature, expires, function(err, user) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        // Create a session for this user
        var authInfo = {
            'app': req.ghApp,
            'user': user
        };
        req.logIn(authInfo, function(err) {
            if (err) {
                return res.status(500).send('Failed to log you in');
            }

            // Get the URL to which the user should be redirected
            var redirectUrl = AuthenticationUtil.validateRedirectUrl(req.cookies.redirectUrl);

            // Remove the cookie
            res.clearCookie('redirectUrl');

            // The user now has a session within Express. We can now safely
            // redirect the user into the system
            return res.redirect(redirectUrl);
        });
    });
});

///////////////////////////
// Signed authentication //
///////////////////////////

/**
 * @REST becomeUser
 *
 * Get the request information for an administrator to become a user
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /auth/signed/become
 * @QueryParam  {number}            becomeUserId            The id of the user to become
 * @Return      {SignedAuthInfo}                            Request information needed to become the specified user
 */
var becomeUser = function(req, res) {
    res.sendStatus(501);
};

GrassHopper.globalAdminRouter.on('get', '/api/auth/signed/become', becomeUser);
GrassHopper.appRouter.on('get', '/api/auth/signed/become', becomeUser);

/**
 * @REST signedAuth
 *
 * Log in using signed authentication
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/signed
 * @BodyParam   {SignedAuthBody}    body                    The request information acquired from the `GET /api/auth/signed/*` endpoint
 * @Return      {void}
 */
GrassHopper.appRouter.on('post', '/api/auth/signed', function(req, res, next) {
    res.sendStatus(501);
});

