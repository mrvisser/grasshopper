/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var csv = require('csv');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-orgunit');
var UsersDAO = require('gh-users/lib/internal/dao');

/**
 * Create an organisational unit
 *
 * @param  {Number}         appId               The id of the application on which to create the organisational unit
 * @param  {String}         displayName         The name of the organisational unit
 * @param  {String}         type                The organisational unit type (e.g. `tripos`, `part`)
 * @param  {String}         [description]       The description of the organisational unit
 * @param  {Object}         [metadata]          The extra metadata for the organisational unit as a JSON object
 * @param  {Boolean}        [published]         The published flag of the organisational unit
 * @param  {Number}         groupId             The id of the group that can manage the organisational unit
 * @param  {Number}         [parentId]          The id of the parent organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var createOrgUnit = module.exports.createOrgUnit = function(appId, displayName, type, description, metadata, published, groupId, parentId, callback) {
    var orgUnit = {
        'AppId': appId,
        'description': description,
        'displayName': displayName,
        'metadata': metadata,
        'published': published,
        'GroupId': groupId,
        'ParentId': parentId,
        'type': type
    };
    DB.OrgUnit.create(orgUnit).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to create organisational unit');
            return callback({'code': 500, 'msg': 'Failed to create an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Update an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to update
 * @param  {Object}         opts                The values to update
 * @param  {String}         [opts.displayName]  Updated organisational unit name
 * @param  {String}         [opts.description]  Updated organisational unit description
 * @param  {String}         [opts.type]         Updated organisational unit type
 * @param  {Object}         [opts.metadata]     Updated organisational unit metadata
 * @param  {Boolean}        [opts.published]    Updated organisational unit published flag
 * @param  {Number}         [opts.GroupId]      Updated organisational unit group
 * @param  {Number}         [opts.ParentId]     Updated organisational unit parent
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The updated organisational unit
 */
var updateOrgUnit = module.exports.updateOrgUnit = function(orgUnit, opts, callback) {
    orgUnit.updateAttributes(opts).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to update an organisational unit');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'orgUnit': orgUnit, 'update': opts}, 'Updated an organisational unit');
        return callback(null, orgUnit);
    });
};

/**
 * Delete an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to delete
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnit = module.exports.deleteOrgUnit = function(orgUnit, callback) {
    orgUnit.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete an organisational unit');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'orgUnit': orgUnit}, 'Deleted an organisational unit');
        return callback();
    });
};

/**
 * Get an organisational unit
 *
 * @param  {Number}         id                  The id of the organisational unit to retrieve
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational unit. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The retrieved organisational unit
 */
var getOrgUnit = module.exports.getOrgUnit = function(id, includeSeries, callback) {
    var options = {
        'where': {'id': id},
        'include': [DB.Group]
    };
    if (includeSeries) {
        options.include.push(DB.Serie);
    }
    DB.OrgUnit.find(options).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err, 'id': id, 'includeSeries': includeSeries}, 'Failed to get an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get an organisational unit'});
        } else if (!orgUnit) {
            log().debug({'err': err, 'id': id, 'includeSeries': includeSeries}, 'Could not find an organisational unit');
            return callback({'code': 404, 'msg': 'Could not find an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Get organisational units by id
 *
 * @param  {Number[]}   ids                     The ids of the organisational units to retrieve
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error object, if any
 * @param  {OrgUnit[]}  callback.orgUnits       The retrieved organisational units
 */
var getOrgUnitsById = module.exports.getOrgUnitsById = function(ids, callback) {
    if (_.isEmpty(ids)) {
        return callback(null, []);
    }

    DB.OrgUnit.findAll({'where': {'id': ids}}).complete(function(err, orgUnits) {
        if (err) {
            log().error({'err': err, 'id': ids}, 'Failed to get organisational units by id');
            return callback({'code': 500, 'msg': 'Failed to get organisational units by id'});
        } else if (orgUnits.length !== ids.length) {
            log().debug({'err': err, 'id': ids}, 'Not all organisational units could be found');
            return callback({'code': 404, 'msg': 'Not all organisational units could be found'});
        }

        return callback(null, orgUnits);
    });
};

/**
 * Get the organisational units for an application
 *
 * @param  {Number}         appId                           The id of the app to get the organisational units for
 * @param  {Number}         [parentId]                      The id of the parent to retrieve the organisational units for
 * @param  {String[]}       [types]                         The organisational unit type[s] to filter the organisational unit by
 * @param  {Object}         [opts]                          A set of extra options that can be specified
 * @param  {Boolean}        [opts.includeSeries]            Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Boolean}        [opts.includeGroups]            Whether to include the group objects associated to the organisational units. Defaults to `false`
 * @param  {Object}         [opts.subscriptions]            The subscription options
 * @param  {Boolean}        [opts.subscriptions.include]    Whether to include if the user specified by `opts.subscriptions.userId` is subscribed to each serie
 * @param  {Number}         [opts.subscriptions.userId]     The id of the user for whom the event series subscriptions need to be checked
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {OrgUnit}        callback.orgUnits               The matching organisational units
 */
var getOrgUnits = module.exports.getOrgUnits = function(appId, parentId, types, opts, callback) {
    opts = opts || {};
    opts.subscriptions = opts.subscriptions || {'include': false};

    var options = {
        'where': {'AppId': appId},
        'include': []
    };
    if (parentId) {
        options.where.ParentId = parentId;
    }
    if (!_.isEmpty(types)) {
        options.where.type = types;
    }

    // Include the event series if necessary
    if (opts.includeSeries) {
        var includeSeries = {'model': DB.Serie, 'required': false, 'include': []};

        // Include the first organisational unit (=A) the series was added to. If this organisational unit (A) doesn't
        // match up with the organisational unit (B) in the main query it means the series was borrowed from A under B
        includeSeries.include.push({
            'model': DB.OrgUnit,
            'required': false,
            'attributes': ['id', 'displayName', 'ParentId']
        });

        // Indicate whether the user is subscribed to the series
        if (opts.subscriptions.include && opts.subscriptions.userId) {
            includeSeries.include.push({
                'model': DB.Calendar,
                'where': {'UserId': opts.subscriptions.userId},
                'required': false,
                'limit': null
            });
        }

        options.include.push(includeSeries);
    }

    // Include the group object if necessary
    if (opts.includeGroups) {
        options.include.push({'model': DB.Group, 'required': true, 'include': [
            {'model': DB.User, 'required': false, 'as': 'LockedBy', 'attributes': ['id', 'displayName']}
        ]});
    }

    DB.OrgUnit.findAll(options).complete(function(err, orgUnits) {
        if (err) {
            log().error({
                'err': err,
                'appId': appId,
                'parentId': parentId,
                'types': types,
                'includeSeries': opts.includeSeries,
                'includeGroups': opts.includeGroups
            }, 'Failed to get the organisational units for an app');
            return callback({'code': 500, 'msg': 'Failed to get the organisational units for an app'});
        }

        return callback(null, orgUnits);
    });
};

/* Series */

/**
 * Get the event series for an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to retrieve the event series for
 * @param  {Number}         limit               The maximum number of results to retrieve
 * @param  {Number}         offset              The paging number of the results to retrieve
 * @param  {Boolean}        upcoming            Whether to only include event series with upcoming events
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Serie[]}        callback.series     The event series for the organisational unit
 */
var getOrgUnitSeries = module.exports.getOrgUnitSeries = function(orgUnit, limit, offset, upcoming, callback) {
    // TODO: upcoming
    orgUnit.getSeries({'limit': limit, 'offset': offset}).complete(function(err, series) {
        if (err) {
            log().error({
                'err': err,
                'limit': limit,
                'offset': offset,
                'id': orgUnit.id
            }, 'Failed to get the series for an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get the series for an organisational unit'});
        }

        return callback(null, series);
    });
};

/**
 * Add an event series to an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to add the serie(s) to
 * @param  {Serie[]}        series              The serie(s) to add to the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var addOrgUnitSeries = module.exports.addOrgUnitSeries = function(orgUnit, series, callback) {
    orgUnit.addSeries(series).complete(function(err) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id,
                'series': _.pluck(series, 'id')
            }, 'Unable to add series to an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to add series to an organisational unit'});
        }

        return callback();
    });
};

/**
 * Remove an event series from an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to remove the serie(s) from
 * @param  {Serie[]}        series              The serie(s) to remove from the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnitSeries = module.exports.deleteOrgUnitSeries = function(orgUnit, series, callback) {
    orgUnit.removeSeries(series).complete(function(err) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id,
                'series': _.pluck(series, 'id')
            }, 'Unable to remove series from an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to remove series from an organisational unit'});
        }

        return callback();
    });
};

/**
 * Subscribe a user to the event series and events in an organisational unit
 *
 * @param  {OrgUnit}    orgUnit         The organisational unit to subscribe the user to
 * @param  {User}       user            The user that needs to be subscribed to the event series and events in an organisational unit
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var subscribeOrgUnit = module.exports.subscribeOrgUnit = function(orgUnit, user, callback) {
    // TODO: Get/Add events & transaction

    // Get all the event series in the organisational unit
    getOrgUnitSeries(orgUnit, null, null, null, function(err, series) {
        if (err) {
            return callback(err);
        }

        UsersDAO.subscribeSeries(series, user, orgUnit.id, callback);
    });
};

/**
 * Unsubscribe a user from the event series and events in an organisational unit
 *
 * @param  {OrgUnit}    orgUnit         The organisational unit to unsubscribe the user from
 * @param  {User}       user            The user that needs to be unsubscribed from the event series and events in an organisational unit
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var unsubscribeOrgUnit = module.exports.unsubscribeOrgUnit = function(orgUnit, user, callback) {
    // TODO: Get/Add events & transactions

    // Get all the event series in the organisational unit
    getOrgUnitSeries(orgUnit, null, null, null, function(err, series) {
        if (err) {
            return callback(err);
        }

        UsersDAO.unsubscribeSeries(series, user, callback);
    });
};

/* Calendar */

/**
 * Get the calendar for an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to get the calendar for
 * @param  {String}         [start]             The timestamp (ISO 8601) from which to get the calendar for the organisation unit
 * @param  {String}         [end]               The timestamp (ISO 8601) until which to get the calendar for the organisation unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Event[]}        callback.events     The requested organisational unit calendar
 */
var getOrgUnitCalendar = module.exports.getOrgUnitCalendar = function(orgUnit, start, end, callback) {
    var dateTimeFilter = {};
    if (start) {
        dateTimeFilter.start = {'gte': start};
    }
    if (end) {
        dateTimeFilter.end = {'lte': end};
    }

    // Minimise the amount of data we retrieve so Sequelize has less to deserialize
    var eventFields = ['id', 'displayName', 'start', 'end', 'location', 'type', 'notes', 'organiserOther', 'updatedAt'];
    var userFields = ['id', 'displayName'];

    var options = {
        // Adding `required` into the model inclusions forces Sequelize to use a
        // `left outer join` to connect the Serie/Events. If these were to be omitted,
        // Sequelize would use an `inner join` which would always result in 0 rows
        'include': [
            {'model': DB.Event, 'where': dateTimeFilter, 'required': false, 'attributes': eventFields, 'include': [
                {'model': DB.User, 'as': 'Organisers', 'required': false, 'attributes': userFields}
            ]}
        ]
    };
    orgUnit.getSeries(options).complete(function(err, series) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id
            }, 'Unable to get the calendar for an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to get the calendar for an organisational unit'});
        }

        var events = [];
        _.each(series, function(serie) {
            events = events.concat(serie.Events);
        });

        // Sort the events on their start date
        events = _.sortBy(events, 'start');

        // TODO: When implemented, add directly associated events
        return callback(null, events);
    });
};

/**
 * Export the direct organisational units, event series and events under an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to export
 * @param  {Number}         format              The format in which the organisational units, event series and events should be exported
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Object|String}  callback.data       The exported organisational units, event series and events
 */
var exportOrgUnit = module.exports.exportOrgUnit = function(orgUnit, format, callback) {
    // Get all the organisational units under the given organisational unit
    getChildOrgUnits([orgUnit.id], function(err, orgUnitIds) {
        if (err) {
            return callback(err);
        }

        // Get the event series and events under the organisational units
        var options = {
            'where': {
                'id': orgUnitIds
            },
            'include': [
                // Series that are associated to the organisational unit
                {'model': DB.Serie, 'include': [
                    {'model': DB.Event, 'include': [
                        {'model': DB.User, 'as': 'Organisers'}
                    ]}
                ]}

                // TODO: Events that are directly associated to the organisational unit
            ]
        };
        DB.OrgUnit.findAll(options).complete(function(err, orgUnits) {
            if (err) {
                log().error({
                    'err': err,
                    'id': orgUnit.id
                }, 'Unable to export an organisational unit');
                return callback({'code': 500, 'msg': 'Unable to export an organisational unit'});
            }

            if (format === 'csv') {
                return exportOrgUnitCSV(orgUnit.id, orgUnits, callback);
            } else {
                return exportOrgUnitJSON(orgUnit.id, orgUnits, callback);
            }
        });
    });
};

var getChildOrgUnits = function(orgUnitIds, callback, _allOrgUnitIds) {
    _allOrgUnitIds = _allOrgUnitIds || orgUnitIds;

    // Get the children of the specified organisational units
    getDirectChildOrgUnits(orgUnitIds, function(err, childOrgUnitIds) {
        if (err) {
            return callback(err);
        }

        // If no further children could be produced, we return
        if (_.isEmpty(childOrgUnitIds)) {
            return callback(null, _allOrgUnitIds);
        }

        // Add the children to the set of known organisational unit ids and get the children's children
        _allOrgUnitIds = _.union(_allOrgUnitIds, childOrgUnitIds);
        getChildOrgUnits(childOrgUnitIds, callback, _allOrgUnitIds);
    });
};

var getDirectChildOrgUnits = function(parentOrgUnitIds, callback) {
    var options = {
        'attributes': ['id'],
        'where': {
            'ParentId': parentOrgUnitIds
        }
    };
    DB.OrgUnit.findAll(options).complete(function(err, childOrgUnits) {
        if (err) {
            return callback(err);
        }

        var ids = _.map(childOrgUnits, function(childOrgUnit) {
            return childOrgUnit.id;
        });
        return callback(null, ids);
    });
};

/**
 * Export the organisational units, event series and events under an organisational unit to CSV
 *
 * As CSV is a flat structure it's a bit awkward to support hierarchical structures. We have made
 * the assumption that organisational units of the same type always occur on the same level in the tree.
 * This allows us to use the type of the organisational unit as a column prefix.
 *
 * Lets look at the following Timetable tree:
 *
 * ```
 * - Asian and Middle Easter Studies (orgunit:course)
 *   -  Chinese Studies (orgunit:subject)
 *      - Part IB (orgunit:part)
 *         - Modern Chinese Texts (orgunit:module)
 *            - Lectures (series)
 *              - 03/11 by Sue Simpson
 *              - 10/11 by Sue Simpson
 *              - 17/11 by Sue Simpson
 *              - 24/11 by Sue Simpson
 *            - Practicals (series)
 *              - 04/11 by Mr Jack McJackerson and Dr Jill Jameson
 *              - 11/11 by Mr Jack McJackerson and Dr Jill Jameson
 *         - Literary Chinese (orgunit:module)
 *            - Classic of Poetry (series)
 *              - 05/11 by Sue Simpson
 *      - Part II (orgunit:part)
 *         - China and Warfare (orgunit:module)
 *           - Tang dynasty (series)
 *             - 12/01 by Dr Wing Lu
 *             - 19/01 by Dr Wing Lu
 * ```
 *
 * In our first example, lets export the entire course.
 * This would result in the following csv columns (for brevity only the id and displayName are included in the example):
 * ```
 * course_id, course_displayName, .., subject_id, subject_displayName, .., part_id, part_displayName, .., module_id, module_displayName, .., series_id, series_displayName, .., event_id, event_displayName, .., organiser_id, organiser_displayName
 * ```
 *
 * and the following data:
 * ```
 * course_id, course_displayName, .., subject_id, subject_displayName, .., part_id, part_displayName, .., module_id, module_displayName, .., series_id, series_displayName, .., event_id, event_displayName, .., organiser_id, organiser_displayName
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 1, Lectures,                     1, 03/11,     1, Sue Simpson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 1, Lectures,                     2, 10/11,     1, Sue Simpson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 1, Lectures,                     3, 17/11,     1, Sue Simpson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 1, Lectures,                     4, 24/11,     1, Sue Simpson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 2, Practicals,                   5, 04/11,     2, Mr Jack McJackerson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 2, Practicals,                   6, 04/11,     3, Dr Jill Jameson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 2, Practicals,                   7, 11/11,     2, Mr Jack McJackerson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 4, Modern Chinese texts,         , 2, Practicals,                   8, 11/11,     3, Dr Jill Jameson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 3      , Part IB,            , 5, Literary Chinese,             , 3, Classic of Poetry,            9, 05/11,     1, Sue Simpson
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 4      , Part II,            , 6, China and Warfare,            , 4, Tang dynasty,                 10, 12/11,    4, Dr Wing Lu
 * 1, Asian and Middle Easter Studies, 2, Chinese Studies,               , 4      , Part II,            , 6, China and Warfare,            , 4, Tang dynasty,                 11, 19/11,    4, Dr Wing Lu
 * ```
 *
 * In our second example, lets export the "China and Warfare" module.
 * It's important to remember that we will only export the node and what is *under* it. This means
 * that the course, subject and part will *NOT* be included in the export:
 *
 * ```
 * module_id, module_displayName, .., series_id, series_displayName, .., event_id, event_displayName, .., organiser_id, organiser_displayName
 * 6, China and Warfare,            , 4, Tang dynasty,                    10, 12/11,                        4, Dr Wing Lu
 * 6, China and Warfare,            , 4, Tang dynasty,                    11, 19/11,                        4, Dr Wing Lu
 * ```
 *
 * For the next example, let's change our input tree. In the previous examples we assumed the input tree
 * was nicely structured with series and events always at the bottom. This isn't necessarily always
 * the case. Series and events can be attached to any organisational unit. We still assume that
 * organisational unit types are on the same level though.
 *
 * ```
 * - Engineering department (orgunit:department)
 *   - Civil engineering (orgunit:category)
 *     - Bridge construction (series)
 *       - Suspension on 04/08 (event)
 *       - Pillars on 11/08 (event)
 *   - Fire drills (series)
 *     - March on 01/03 (event)
 *     - April on 01/04 (event)
 *   - Mandatory health and safety session on 06/06 (event)
 * ```
 *
 * This would be exported as:
 *
 * ```
 * department_id, department_displayName, .., category_id, category_displayName, .., series_id, series_displayName, .., event_id, event_displayName
 * 1, Engineering department,               , 2,  Civil engineering,               , 3,  Bridge construction,         ,  1, Suspension
 * 1, Engineering department,               , 2,  Civil engineering,               , 3,  Bridge construction,         ,  2, Pillars
 * 1, Engineering department,               ,  ,                                   , 3,  Fire drills,                 ,  3, March
 * 1, Engineering department,               ,  ,                                   , 3,  Fire drills,                 ,  4, April
 * 1, Engineering department,               ,  ,                                   ,  ,             ,                 ,  5, Mandatory health and safety session
 * ```
 *
 * @param  {Number}         rootId              The id of the root organisational unit in the tree of organisational units, event series and events
 * @param  {OrgUnit[]}      orgUnits            All the organisational units that are in the tree. Each organisational unit should have the event series and events available on its object that are under it
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {String}         callback.data       The exported organisational units, event series and events as CSV
 */
var exportOrgUnitCSV = function(rootId, orgUnits, callback) {
    // Get the simplified tree by exporting it to JSON first
    exportOrgUnitJSON(rootId, orgUnits, function(err, exportedOrgUnit) {
        if (err) {
            return callback(err);
        }

        var columns = getExportCSVColumns(exportedOrgUnit);
        if (!columns) {
            return callback({'code': 400, 'msg': 'Tried to export an organisational unit that has children with the same type of different levels'});
        }

        var records = getExportCSVRecords(exportedOrgUnit);

        // Stringify the records into CSV
        var options = {
            'header': false,
            'columns': columns
        };
        return csv.stringify(records, options, callback);
    });
};

var getExportCSVColumns = function(exportedOrgUnit) {
    // Walk the tree and determine the type of each nodes. We retain this information so we
    // can collect the correct column headers for the CSV file
    var types = {};
    var malformed = false;
    var visitNodeForType = function(node, level) {
        var type = node.type;
        if (types[type] && types[type] !== level) {
            log().warn({'orgUnit': rootId}, 'Tried to export an organisational unit that has children with the same type of different levels');
            malformed = true;
        }

        types[type] = level;

        // Visit the node's children
        _.each(node.children, function(child) {
            visitNodeForType(child, level + 1);
        });
    };

    // Visit each node, starting with the root
    visitNodeForType(exportedOrgUnit, 0);

    // We can't support trees with the same type on different levels
    if (malformed) {
        return null;
    }

    var columns = _.chain(types)
        .pairs()
        // Sort the types ascending on their level
        .sortBy(function(item) {
            return item[1];
        })
        // Return the columns for each organisational unit type
        .map(function(item) {
            return [
                item[0] + '_id',
                item[0] + '_externalId',
                item[0] + '_displayName',
                item[0] + '_description',
                item[0] + '_published'
            ];
        })
        .value();

    // Add the column headers for series, events and organisers
    columns.push(['series_id', 'series_externalId', 'series_displayName', 'series_description']);
    columns.push(['event_id', 'event_externalId', 'event_displayName', 'event_description', 'event_notes', 'event_location', 'event_start', 'event_end']);
    columns.push(['organiser_id', 'organiser_shibbolethId', 'organiser_displayName']);

    // Generate a nice flat list
    columns = _.flatten(columns);
    return columns;
};

var getExportCSVRecords = function(exportedOrgUnit) {
    // Will contain an object per line in the resulting CSV file
    var records = [];

    var visitOrgUnit = function(orgUnit, record) {
        record[orgUnit.type + '_id'] = orgUnit.id;
        record[orgUnit.type + '_externalId'] = orgUnit.externalId;
        record[orgUnit.type + '_displayName'] = orgUnit.displayName;
        record[orgUnit.type + '_description'] = orgUnit.description;
        record[orgUnit.type + '_published'] = orgUnit.published;

        _.each(orgUnit.children, function(child) {
            var copyRecord = _.clone(record);
            visitOrgUnit(child, copyRecord);
        });

        _.each(orgUnit.series, function(series) {
            var copyRecord = _.clone(record);
            visitSeries(series, copyRecord);
        });

        _.each(orgUnit.events, function(event) {
            var copyRecord = _.clone(record);
            visitEvent(event, copyRecord);
        });
    };

    var visitSeries = function(series, record) {
        record['series_id'] = series.id;
        record['series_externalId'] = series.externalId;
        record['series_displayName'] = series.displayName;
        record['series_description'] = series.description;

        _.each(series.events, function(event) {
            var copyRecord = _.clone(record);
            visitEvent(event, copyRecord);
        });
    };

    var visitEvent = function(event, record) {
        record['event_id'] = event.id;
        record['event_externalId'] = event.externalId;
        record['event_displayName'] = event.displayName;
        record['event_description'] = event.description;
        record['event_notes'] = event.notes;
        record['event_location'] = event.location;
        record['event_start'] = event.start;
        record['event_end'] = event.end;

        if (_.isEmpty(event.organisers)) {
            records.push(record);
        } else {
            _.each(event.organisers, function(organiser) {
                var copyRecord = _.clone(record);
                if (_.isObject(organiser)) {
                    copyRecord['organiser_id'] = organiser.id;
                    copyRecord['organiser_shibbolethId'] = organiser.shibbolethId;
                    copyRecord['organiser_displayName'] = organiser.displayName;
                } else {
                    copyRecord['organiser_displayName'] = organiser;
                }

                records.push(copyRecord);
            });
        }
    };

    visitOrgUnit(exportedOrgUnit, {});
    return records;
};

/**
 * Export the direct organisational units, event series and events under an organisational unit to JSON
 *
 * @param  {Number}         rootId              The id of the root organisational unit in the tree of organisational units, event series and events
 * @param  {OrgUnit[]}      orgUnits            All the organisational units that are in the tree. Each organisational unit should have the event series and events available on its object that are under it
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {String}         callback.data       The exported organisational units, event series and events as a JSON tree
 */
var exportOrgUnitJSON = function(rootId, orgUnits, callback) {
    var exportOrgUnit = function(orgUnit) {
        // Get the children of this organisational unit so we can export those
        var children = _.filter(orgUnits, function(potentialChildOrgUnit) {
            return (potentialChildOrgUnit.ParentId === orgUnit.id);
        });

        return {
            'id': orgUnit.id,
            'externalId': orgUnit.externalId,
            'displayName': orgUnit.displayName,
            'description': orgUnit.description,
            'published': orgUnit.published,
            'type': orgUnit.type,
            'children': _.map(children, exportOrgUnit),
            'series': _.map(orgUnit.Series, exportSeries)
        };
    };

    var exportSeries = function(series) {
        return {
            'id': series.id,
            'externalId': series.externalId,
            'displayName': series.displayName,
            'description': series.description,
            'type': 'series',
            'events': _.map(series.Events, exportEvent)
        };
    };

    var exportEvent = function(event) {
        // Stringify the event instance so we have access to the `organisers` property
        event = event.toJSON();

        return {
            'id': event.id,
            'externalId': event.externalId,
            'displayName': event.displayName,
            'description': event.description,
            'notes': event.notes,
            'location': event.location,
            'start': event.start,
            'end': event.end,
            'type': 'event',
            'organisers': _.map(event.organisers, function(organiser) {
                var exportedOrganiser = {
                    'id': null,
                    'shibbolethId': null,
                    'displayName': null,
                    'type': 'organiser'
                };
                if (_.isString(organiser)) {
                    exportedOrganiser.displayName = organiser;
                } else {
                    exportedOrganiser.id = organiser.id;
                    exportedOrganiser.shibbolethId = organiser.shibbolethId;
                    exportedOrganiser.displayName = organiser.displayName;
                }
                return exportedOrganiser;
            })
        };
    };

    // Find the root organisational unit
    var rootOrgUnit = _.find(orgUnits, function(orgUnit) {
        return (orgUnit.id === rootId);
    });

    // Build the tree
    var tree = exportOrgUnit(rootOrgUnit);

    return callback(null, tree);
};
