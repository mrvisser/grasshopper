/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestsUtil = require('gh-events/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitTestUtil = require('./util');

describe('Organisational units - export', function() {

    /**
     * Test that verifies a format can be selected when exporting to an organisational unit
     */
    it('verify the format when exporting an organisational unit', function(callback) {
        OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Assert that the organisational unit can be exported into JSON
            OrgUnitTestUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, 'json', function(data) {

                // Assert that the organisational unit can be exported into CSV
                OrgUnitTestUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, 'csv', function(data) {

                    // Assert that the format defaults to JSON
                    OrgUnitTestUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(data) {
                        return callback();
                    });
                });
            });
        });
    });

    /**
     * Test that verifies validation when exporting an organisational unit
     */
    it('verify validation when exporting an organisational unit', function(callback) {
        OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Invalid organisational unit id
            OrgUnitTestUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, 'not an id', 'json', 400, function() {

                // Unknown organisational unit id
                OrgUnitTestUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, -1, 'json', 404, function() {
                    OrgUnitTestUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, 234234234234, 'json', 404, function() {

                        // Invalid format
                        OrgUnitTestUtil.assertExportOrgUnitFails(global.tests.admins.cam2013.client, part.id, 'invalid format', 400, function() {
                            return callback();
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies authorization when exporting an organisational unit
     */
    it('verify authorization when exporting an organisational unit', function(callback) {
        OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(course, subject, part, module, series) {

            // Anonymous users cannot export an organisational unit
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                OrgUnitTestUtil.assertExportOrgUnitFails(anonymousClient, part.id, null, 401, function() {
                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                        OrgUnitTestUtil.assertExportOrgUnitFails(anonymousGlobalClient, part.id, null, 401, function() {

                            // Regular users from another application can't export an organisational unit
                            TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(simon) {
                                OrgUnitTestUtil.assertExportOrgUnitFails(simon.client, part.id, null, 401, function() {

                                    // Application administrators from another application can't export an organisational unit
                                    OrgUnitTestUtil.assertExportOrgUnitFails(global.tests.admins.oxford2014.client, part.id, null, 401, function() {

                                        // Regular users from the same application can export an organisational unit
                                        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(nico) {
                                            OrgUnitTestUtil.assertExportOrgUnitFails(nico.client, part.id, null, 401, function() {

                                                // Application administrators from the same application can export an organisational unit
                                                OrgUnitTestUtil.assertExportOrgUnit(global.tests.admins.cam2013.client, part.id, null, function(data) {

                                                    // Global administrators can export an organisational unit
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                        OrgUnitTestUtil.assertExportOrgUnit(globalAdminRestClient, part.id, null, function(data) {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
